
Toggle_Nema.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000567c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005848  08005848  00015848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058d8  080058d8  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058e0  080058e0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e0  080058e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080058e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000024  0800590c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  0800590c  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011908  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e0  00000000  00000000  0003195c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00033b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00034b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226d9  00000000  00000000  00035a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013413  00000000  00000000  000580e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3c91  00000000  00000000  0006b4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f18d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004640  00000000  00000000  0013f1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000024 	.word	0x20000024
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800582c 	.word	0x0800582c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000028 	.word	0x20000028
 8000204:	0800582c 	.word	0x0800582c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b974 	b.w	8000e54 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9d08      	ldr	r5, [sp, #32]
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	468e      	mov	lr, r1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d14d      	bne.n	8000c2e <__udivmoddi4+0xaa>
 8000b92:	428a      	cmp	r2, r1
 8000b94:	4694      	mov	ip, r2
 8000b96:	d969      	bls.n	8000c6c <__udivmoddi4+0xe8>
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	b152      	cbz	r2, 8000bb4 <__udivmoddi4+0x30>
 8000b9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba2:	f1c2 0120 	rsb	r1, r2, #32
 8000ba6:	fa20 f101 	lsr.w	r1, r0, r1
 8000baa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bae:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb2:	4094      	lsls	r4, r2
 8000bb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb8:	0c21      	lsrs	r1, r4, #16
 8000bba:	fbbe f6f8 	udiv	r6, lr, r8
 8000bbe:	fa1f f78c 	uxth.w	r7, ip
 8000bc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bca:	fb06 f107 	mul.w	r1, r6, r7
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	d90a      	bls.n	8000be8 <__udivmoddi4+0x64>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bda:	f080 811f 	bcs.w	8000e1c <__udivmoddi4+0x298>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 811c 	bls.w	8000e1c <__udivmoddi4+0x298>
 8000be4:	3e02      	subs	r6, #2
 8000be6:	4463      	add	r3, ip
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 f707 	mul.w	r7, r0, r7
 8000bfc:	42a7      	cmp	r7, r4
 8000bfe:	d90a      	bls.n	8000c16 <__udivmoddi4+0x92>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c08:	f080 810a 	bcs.w	8000e20 <__udivmoddi4+0x29c>
 8000c0c:	42a7      	cmp	r7, r4
 8000c0e:	f240 8107 	bls.w	8000e20 <__udivmoddi4+0x29c>
 8000c12:	4464      	add	r4, ip
 8000c14:	3802      	subs	r0, #2
 8000c16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1a:	1be4      	subs	r4, r4, r7
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	b11d      	cbz	r5, 8000c28 <__udivmoddi4+0xa4>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c5 4300 	strd	r4, r3, [r5]
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xc2>
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	f000 80ef 	beq.w	8000e16 <__udivmoddi4+0x292>
 8000c38:	2600      	movs	r6, #0
 8000c3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3e:	4630      	mov	r0, r6
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f683 	clz	r6, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d14a      	bne.n	8000ce4 <__udivmoddi4+0x160>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd4>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80f9 	bhi.w	8000e4a <__udivmoddi4+0x2c6>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	469e      	mov	lr, r3
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa4>
 8000c66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa4>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xec>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 8092 	bne.w	8000d9e <__udivmoddi4+0x21a>
 8000c7a:	eba1 010c 	sub.w	r1, r1, ip
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f fe8c 	uxth.w	lr, ip
 8000c86:	2601      	movs	r6, #1
 8000c88:	0c20      	lsrs	r0, r4, #16
 8000c8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c96:	fb0e f003 	mul.w	r0, lr, r3
 8000c9a:	4288      	cmp	r0, r1
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x12c>
 8000c9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x12a>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f200 80cb 	bhi.w	8000e44 <__udivmoddi4+0x2c0>
 8000cae:	4643      	mov	r3, r8
 8000cb0:	1a09      	subs	r1, r1, r0
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d908      	bls.n	8000cda <__udivmoddi4+0x156>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x154>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f200 80bb 	bhi.w	8000e4e <__udivmoddi4+0x2ca>
 8000cd8:	4608      	mov	r0, r1
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce2:	e79c      	b.n	8000c1e <__udivmoddi4+0x9a>
 8000ce4:	f1c6 0720 	rsb	r7, r6, #32
 8000ce8:	40b3      	lsls	r3, r6
 8000cea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfa:	431c      	orrs	r4, r3
 8000cfc:	40f9      	lsrs	r1, r7
 8000cfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d02:	fa00 f306 	lsl.w	r3, r0, r6
 8000d06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d0a:	0c20      	lsrs	r0, r4, #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fb09 1118 	mls	r1, r9, r8, r1
 8000d14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d18:	fb08 f00e 	mul.w	r0, r8, lr
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b8>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d2c:	f080 8088 	bcs.w	8000e40 <__udivmoddi4+0x2bc>
 8000d30:	4288      	cmp	r0, r1
 8000d32:	f240 8085 	bls.w	8000e40 <__udivmoddi4+0x2bc>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	4461      	add	r1, ip
 8000d3c:	1a09      	subs	r1, r1, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d44:	fb09 1110 	mls	r1, r9, r0, r1
 8000d48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d50:	458e      	cmp	lr, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1e2>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d5c:	d26c      	bcs.n	8000e38 <__udivmoddi4+0x2b4>
 8000d5e:	458e      	cmp	lr, r1
 8000d60:	d96a      	bls.n	8000e38 <__udivmoddi4+0x2b4>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6e:	eba1 010e 	sub.w	r1, r1, lr
 8000d72:	42a1      	cmp	r1, r4
 8000d74:	46c8      	mov	r8, r9
 8000d76:	46a6      	mov	lr, r4
 8000d78:	d356      	bcc.n	8000e28 <__udivmoddi4+0x2a4>
 8000d7a:	d053      	beq.n	8000e24 <__udivmoddi4+0x2a0>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x212>
 8000d7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d82:	eb61 010e 	sbc.w	r1, r1, lr
 8000d86:	fa01 f707 	lsl.w	r7, r1, r7
 8000d8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8e:	40f1      	lsrs	r1, r6
 8000d90:	431f      	orrs	r7, r3
 8000d92:	e9c5 7100 	strd	r7, r1, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	40d8      	lsrs	r0, r3
 8000da4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dac:	4091      	lsls	r1, r2
 8000dae:	4301      	orrs	r1, r0
 8000db0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc0:	0c0b      	lsrs	r3, r1, #16
 8000dc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dca:	429e      	cmp	r6, r3
 8000dcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x260>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dda:	d22f      	bcs.n	8000e3c <__udivmoddi4+0x2b8>
 8000ddc:	429e      	cmp	r6, r3
 8000dde:	d92d      	bls.n	8000e3c <__udivmoddi4+0x2b8>
 8000de0:	3802      	subs	r0, #2
 8000de2:	4463      	add	r3, ip
 8000de4:	1b9b      	subs	r3, r3, r6
 8000de6:	b289      	uxth	r1, r1
 8000de8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dec:	fb07 3316 	mls	r3, r7, r6, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb06 f30e 	mul.w	r3, r6, lr
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x28a>
 8000dfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000e00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e04:	d216      	bcs.n	8000e34 <__udivmoddi4+0x2b0>
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d914      	bls.n	8000e34 <__udivmoddi4+0x2b0>
 8000e0a:	3e02      	subs	r6, #2
 8000e0c:	4461      	add	r1, ip
 8000e0e:	1ac9      	subs	r1, r1, r3
 8000e10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e14:	e738      	b.n	8000c88 <__udivmoddi4+0x104>
 8000e16:	462e      	mov	r6, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e705      	b.n	8000c28 <__udivmoddi4+0xa4>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	e6e3      	b.n	8000be8 <__udivmoddi4+0x64>
 8000e20:	4618      	mov	r0, r3
 8000e22:	e6f8      	b.n	8000c16 <__udivmoddi4+0x92>
 8000e24:	454b      	cmp	r3, r9
 8000e26:	d2a9      	bcs.n	8000d7c <__udivmoddi4+0x1f8>
 8000e28:	ebb9 0802 	subs.w	r8, r9, r2
 8000e2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e30:	3801      	subs	r0, #1
 8000e32:	e7a3      	b.n	8000d7c <__udivmoddi4+0x1f8>
 8000e34:	4646      	mov	r6, r8
 8000e36:	e7ea      	b.n	8000e0e <__udivmoddi4+0x28a>
 8000e38:	4620      	mov	r0, r4
 8000e3a:	e794      	b.n	8000d66 <__udivmoddi4+0x1e2>
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	e7d1      	b.n	8000de4 <__udivmoddi4+0x260>
 8000e40:	46d0      	mov	r8, sl
 8000e42:	e77b      	b.n	8000d3c <__udivmoddi4+0x1b8>
 8000e44:	3b02      	subs	r3, #2
 8000e46:	4461      	add	r1, ip
 8000e48:	e732      	b.n	8000cb0 <__udivmoddi4+0x12c>
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	e709      	b.n	8000c62 <__udivmoddi4+0xde>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e742      	b.n	8000cda <__udivmoddi4+0x156>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <microDelay>:

int stepDelay = 2000; // 1000us more delay means less speed
int count = 1;

void microDelay (uint16_t delay)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <microDelay+0x30>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000e6a:	bf00      	nop
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <microDelay+0x30>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d3f9      	bcc.n	8000e6c <microDelay+0x14>
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	200000f4 	.word	0x200000f4

08000e8c <MPU6050_Init>:
float currentAngle;
float gyroRate;
unsigned long currTime, prevTime=0, loopTime;

void MPU6050_Init (void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af04      	add	r7, sp, #16
	uint8_t check, Data;

	//check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	2275      	movs	r2, #117	; 0x75
 8000ea4:	21d0      	movs	r1, #208	; 0xd0
 8000ea6:	4823      	ldr	r0, [pc, #140]	; (8000f34 <MPU6050_Init+0xa8>)
 8000ea8:	f001 feb6 	bl	8002c18 <HAL_I2C_Mem_Read>

		if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b68      	cmp	r3, #104	; 0x68
 8000eb0:	d13b      	bne.n	8000f2a <MPU6050_Init+0x9e>
			{
				// power management register 0X6B we should write all 0's to wake the sensor up
				Data = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	71bb      	strb	r3, [r7, #6]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	1dbb      	adds	r3, r7, #6
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	226b      	movs	r2, #107	; 0x6b
 8000ec8:	21d0      	movs	r1, #208	; 0xd0
 8000eca:	481a      	ldr	r0, [pc, #104]	; (8000f34 <MPU6050_Init+0xa8>)
 8000ecc:	f001 fdaa 	bl	8002a24 <HAL_I2C_Mem_Write>

				// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
				Data = 0x07;
 8000ed0:	2307      	movs	r3, #7
 8000ed2:	71bb      	strb	r3, [r7, #6]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000ed4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed8:	9302      	str	r3, [sp, #8]
 8000eda:	2301      	movs	r3, #1
 8000edc:	9301      	str	r3, [sp, #4]
 8000ede:	1dbb      	adds	r3, r7, #6
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	2219      	movs	r2, #25
 8000ee6:	21d0      	movs	r1, #208	; 0xd0
 8000ee8:	4812      	ldr	r0, [pc, #72]	; (8000f34 <MPU6050_Init+0xa8>)
 8000eea:	f001 fd9b 	bl	8002a24 <HAL_I2C_Mem_Write>

				// Set accelerometer configuration in ACCEL_CONFIG Register
				// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> +/- 2g
				Data = 0x00;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	71bb      	strb	r3, [r7, #6]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	1dbb      	adds	r3, r7, #6
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2301      	movs	r3, #1
 8000f02:	221c      	movs	r2, #28
 8000f04:	21d0      	movs	r1, #208	; 0xd0
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <MPU6050_Init+0xa8>)
 8000f08:	f001 fd8c 	bl	8002a24 <HAL_I2C_Mem_Write>

				// Set Gyroscopic configuration in GYRO_CONFIG Register
				// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> +/- 250 deg/s
				Data = 0x00;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	71bb      	strb	r3, [r7, #6]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000f10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	2301      	movs	r3, #1
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	1dbb      	adds	r3, r7, #6
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	221b      	movs	r2, #27
 8000f22:	21d0      	movs	r1, #208	; 0xd0
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <MPU6050_Init+0xa8>)
 8000f26:	f001 fd7d 	bl	8002a24 <HAL_I2C_Mem_Write>

	       }
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000040 	.word	0x20000040

08000f38 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel (void)
{
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	//Read 6 Bytes of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	2306      	movs	r3, #6
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	463b      	mov	r3, r7
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	223b      	movs	r2, #59	; 0x3b
 8000f50:	21d0      	movs	r1, #208	; 0xd0
 8000f52:	484d      	ldr	r0, [pc, #308]	; (8001088 <MPU6050_Read_Accel+0x150>)
 8000f54:	f001 fe60 	bl	8002c18 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8000f58:	783b      	ldrb	r3, [r7, #0]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	787b      	ldrb	r3, [r7, #1]
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	4b49      	ldr	r3, [pc, #292]	; (800108c <MPU6050_Read_Accel+0x154>)
 8000f68:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8000f6a:	78bb      	ldrb	r3, [r7, #2]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	4b45      	ldr	r3, [pc, #276]	; (8001090 <MPU6050_Read_Accel+0x158>)
 8000f7a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8000f7c:	793b      	ldrb	r3, [r7, #4]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	797b      	ldrb	r3, [r7, #5]
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	4b42      	ldr	r3, [pc, #264]	; (8001094 <MPU6050_Read_Accel+0x15c>)
 8000f8c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = ((float) Accel_X_RAW)/16384.0 - Ax_offset;  // get the float g
 8000f8e:	4b3f      	ldr	r3, [pc, #252]	; (800108c <MPU6050_Read_Accel+0x154>)
 8000f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9c:	ee17 0a90 	vmov	r0, s15
 8000fa0:	f7ff fa96 	bl	80004d0 <__aeabi_f2d>
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	4b3b      	ldr	r3, [pc, #236]	; (8001098 <MPU6050_Read_Accel+0x160>)
 8000faa:	f7ff fc13 	bl	80007d4 <__aeabi_ddiv>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4614      	mov	r4, r2
 8000fb4:	461d      	mov	r5, r3
 8000fb6:	4b39      	ldr	r3, [pc, #228]	; (800109c <MPU6050_Read_Accel+0x164>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fa88 	bl	80004d0 <__aeabi_f2d>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	f7ff f922 	bl	8000210 <__aeabi_dsub>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f7ff fd6e 	bl	8000ab4 <__aeabi_d2f>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a31      	ldr	r2, [pc, #196]	; (80010a0 <MPU6050_Read_Accel+0x168>)
 8000fdc:	6013      	str	r3, [r2, #0]
	Ay = ((float) Accel_Y_RAW)/16384.0 - Ay_offset;
 8000fde:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <MPU6050_Read_Accel+0x158>)
 8000fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fec:	ee17 0a90 	vmov	r0, s15
 8000ff0:	f7ff fa6e 	bl	80004d0 <__aeabi_f2d>
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <MPU6050_Read_Accel+0x160>)
 8000ffa:	f7ff fbeb 	bl	80007d4 <__aeabi_ddiv>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4614      	mov	r4, r2
 8001004:	461d      	mov	r5, r3
 8001006:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <MPU6050_Read_Accel+0x16c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fa60 	bl	80004d0 <__aeabi_f2d>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4620      	mov	r0, r4
 8001016:	4629      	mov	r1, r5
 8001018:	f7ff f8fa 	bl	8000210 <__aeabi_dsub>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fd46 	bl	8000ab4 <__aeabi_d2f>
 8001028:	4603      	mov	r3, r0
 800102a:	4a1f      	ldr	r2, [pc, #124]	; (80010a8 <MPU6050_Read_Accel+0x170>)
 800102c:	6013      	str	r3, [r2, #0]
	Az = ((float) Accel_Z_RAW)/16384.0 - Az_offset;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MPU6050_Read_Accel+0x15c>)
 8001030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103c:	ee17 0a90 	vmov	r0, s15
 8001040:	f7ff fa46 	bl	80004d0 <__aeabi_f2d>
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <MPU6050_Read_Accel+0x160>)
 800104a:	f7ff fbc3 	bl	80007d4 <__aeabi_ddiv>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4614      	mov	r4, r2
 8001054:	461d      	mov	r5, r3
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MPU6050_Read_Accel+0x174>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa38 	bl	80004d0 <__aeabi_f2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4620      	mov	r0, r4
 8001066:	4629      	mov	r1, r5
 8001068:	f7ff f8d2 	bl	8000210 <__aeabi_dsub>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fd1e 	bl	8000ab4 <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <MPU6050_Read_Accel+0x178>)
 800107c:	6013      	str	r3, [r2, #0]
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bdb0      	pop	{r4, r5, r7, pc}
 8001086:	bf00      	nop
 8001088:	20000040 	.word	0x20000040
 800108c:	200001c8 	.word	0x200001c8
 8001090:	200001ca 	.word	0x200001ca
 8001094:	200001cc 	.word	0x200001cc
 8001098:	40d00000 	.word	0x40d00000
 800109c:	200001ec 	.word	0x200001ec
 80010a0:	200001d4 	.word	0x200001d4
 80010a4:	200001f0 	.word	0x200001f0
 80010a8:	200001d8 	.word	0x200001d8
 80010ac:	200001f4 	.word	0x200001f4
 80010b0:	200001dc 	.word	0x200001dc
 80010b4:	00000000 	.word	0x00000000

080010b8 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro (void)
{
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2306      	movs	r3, #6
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	463b      	mov	r3, r7
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	2243      	movs	r2, #67	; 0x43
 80010d0:	21d0      	movs	r1, #208	; 0xd0
 80010d2:	484f      	ldr	r0, [pc, #316]	; (8001210 <MPU6050_Read_Gyro+0x158>)
 80010d4:	f001 fda0 	bl	8002c18 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80010d8:	783b      	ldrb	r3, [r7, #0]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	787b      	ldrb	r3, [r7, #1]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b4b      	ldr	r3, [pc, #300]	; (8001214 <MPU6050_Read_Gyro+0x15c>)
 80010e8:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80010ea:	78bb      	ldrb	r3, [r7, #2]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	4b47      	ldr	r3, [pc, #284]	; (8001218 <MPU6050_Read_Gyro+0x160>)
 80010fa:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80010fc:	793b      	ldrb	r3, [r7, #4]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	797b      	ldrb	r3, [r7, #5]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21a      	sxth	r2, r3
 800110a:	4b44      	ldr	r3, [pc, #272]	; (800121c <MPU6050_Read_Gyro+0x164>)
 800110c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = ((float) Gyro_X_RAW)/131.0 - Gx_offset;
 800110e:	4b41      	ldr	r3, [pc, #260]	; (8001214 <MPU6050_Read_Gyro+0x15c>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111c:	ee17 0a90 	vmov	r0, s15
 8001120:	f7ff f9d6 	bl	80004d0 <__aeabi_f2d>
 8001124:	a338      	add	r3, pc, #224	; (adr r3, 8001208 <MPU6050_Read_Gyro+0x150>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff fb53 	bl	80007d4 <__aeabi_ddiv>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4614      	mov	r4, r2
 8001134:	461d      	mov	r5, r3
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <MPU6050_Read_Gyro+0x168>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f9c8 	bl	80004d0 <__aeabi_f2d>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4620      	mov	r0, r4
 8001146:	4629      	mov	r1, r5
 8001148:	f7ff f862 	bl	8000210 <__aeabi_dsub>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fcae 	bl	8000ab4 <__aeabi_d2f>
 8001158:	4603      	mov	r3, r0
 800115a:	4a32      	ldr	r2, [pc, #200]	; (8001224 <MPU6050_Read_Gyro+0x16c>)
 800115c:	6013      	str	r3, [r2, #0]
	Gy = ((float) Gyro_Y_RAW)/131.0 - Gy_offset;
 800115e:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <MPU6050_Read_Gyro+0x160>)
 8001160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ee17 0a90 	vmov	r0, s15
 8001170:	f7ff f9ae 	bl	80004d0 <__aeabi_f2d>
 8001174:	a324      	add	r3, pc, #144	; (adr r3, 8001208 <MPU6050_Read_Gyro+0x150>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fb2b 	bl	80007d4 <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4614      	mov	r4, r2
 8001184:	461d      	mov	r5, r3
 8001186:	4b28      	ldr	r3, [pc, #160]	; (8001228 <MPU6050_Read_Gyro+0x170>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9a0 	bl	80004d0 <__aeabi_f2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4620      	mov	r0, r4
 8001196:	4629      	mov	r1, r5
 8001198:	f7ff f83a 	bl	8000210 <__aeabi_dsub>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fc86 	bl	8000ab4 <__aeabi_d2f>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a20      	ldr	r2, [pc, #128]	; (800122c <MPU6050_Read_Gyro+0x174>)
 80011ac:	6013      	str	r3, [r2, #0]
	Gz = ((float) Gyro_Z_RAW)/131.0 - Gz_offset;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MPU6050_Read_Gyro+0x164>)
 80011b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011bc:	ee17 0a90 	vmov	r0, s15
 80011c0:	f7ff f986 	bl	80004d0 <__aeabi_f2d>
 80011c4:	a310      	add	r3, pc, #64	; (adr r3, 8001208 <MPU6050_Read_Gyro+0x150>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff fb03 	bl	80007d4 <__aeabi_ddiv>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4614      	mov	r4, r2
 80011d4:	461d      	mov	r5, r3
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MPU6050_Read_Gyro+0x178>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f978 	bl	80004d0 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff f812 	bl	8000210 <__aeabi_dsub>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fc5e 	bl	8000ab4 <__aeabi_d2f>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <MPU6050_Read_Gyro+0x17c>)
 80011fc:	6013      	str	r3, [r2, #0]
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bdb0      	pop	{r4, r5, r7, pc}
 8001206:	bf00      	nop
 8001208:	00000000 	.word	0x00000000
 800120c:	40606000 	.word	0x40606000
 8001210:	20000040 	.word	0x20000040
 8001214:	200001ce 	.word	0x200001ce
 8001218:	200001d0 	.word	0x200001d0
 800121c:	200001d2 	.word	0x200001d2
 8001220:	20000004 	.word	0x20000004
 8001224:	200001e0 	.word	0x200001e0
 8001228:	20000008 	.word	0x20000008
 800122c:	200001e4 	.word	0x200001e4
 8001230:	200001f8 	.word	0x200001f8
 8001234:	200001e8 	.word	0x200001e8

08001238 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  MPU6050_Read_Accel();
 8001240:	f7ff fe7a 	bl	8000f38 <MPU6050_Read_Accel>
  MPU6050_Read_Gyro();
 8001244:	f7ff ff38 	bl	80010b8 <MPU6050_Read_Gyro>


}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001254:	f000 fc86 	bl	8001b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001258:	f000 f8e6 	bl	8001428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125c:	f000 fa54 	bl	8001708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001260:	f000 fa08 	bl	8001674 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001264:	f000 f980 	bl	8001568 <MX_TIM1_Init>
  MX_DMA_Init();
 8001268:	f000 fa2e 	bl	80016c8 <MX_DMA_Init>
  MX_TIM7_Init();
 800126c:	f000 f9cc 	bl	8001608 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001270:	f000 f94c 	bl	800150c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 8001274:	f7ff fe0a 	bl	8000e8c <MPU6050_Init>
  HAL_TIM_Base_Start(&htim1);
 8001278:	485b      	ldr	r0, [pc, #364]	; (80013e8 <main+0x198>)
 800127a:	f003 f8d7 	bl	800442c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 800127e:	485b      	ldr	r0, [pc, #364]	; (80013ec <main+0x19c>)
 8001280:	f003 f93c 	bl	80044fc <HAL_TIM_Base_Start_IT>
	  //*DWT_CYCCNT=0;
	  //*DWT_CONTROL=1;
	  //MPU6050_Read_Accel();
	  //MPU6050_Read_Gyro();
	  //x=*DWT_CYCCNT;
	  currTime = HAL_GetTick();
 8001284:	f000 fcd4 	bl	8001c30 <HAL_GetTick>
 8001288:	4603      	mov	r3, r0
 800128a:	4a59      	ldr	r2, [pc, #356]	; (80013f0 <main+0x1a0>)
 800128c:	6013      	str	r3, [r2, #0]
	  accAngle = atan2(Ay, Az)*RAD_TO_DEG;
 800128e:	4b59      	ldr	r3, [pc, #356]	; (80013f4 <main+0x1a4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f91c 	bl	80004d0 <__aeabi_f2d>
 8001298:	4604      	mov	r4, r0
 800129a:	460d      	mov	r5, r1
 800129c:	4b56      	ldr	r3, [pc, #344]	; (80013f8 <main+0x1a8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f915 	bl	80004d0 <__aeabi_f2d>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	ec43 2b11 	vmov	d1, r2, r3
 80012ae:	ec45 4b10 	vmov	d0, r4, r5
 80012b2:	f004 f843 	bl	800533c <atan2>
 80012b6:	ec51 0b10 	vmov	r0, r1, d0
 80012ba:	4b50      	ldr	r3, [pc, #320]	; (80013fc <main+0x1ac>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff f95e 	bl	8000580 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fbf2 	bl	8000ab4 <__aeabi_d2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4a4b      	ldr	r2, [pc, #300]	; (8001400 <main+0x1b0>)
 80012d4:	6013      	str	r3, [r2, #0]
	  currTime = HAL_GetTick();
 80012d6:	f000 fcab 	bl	8001c30 <HAL_GetTick>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a44      	ldr	r2, [pc, #272]	; (80013f0 <main+0x1a0>)
 80012de:	6013      	str	r3, [r2, #0]
	  loopTime = currTime - prevTime;
 80012e0:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <main+0x1a0>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b47      	ldr	r3, [pc, #284]	; (8001404 <main+0x1b4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	4a47      	ldr	r2, [pc, #284]	; (8001408 <main+0x1b8>)
 80012ec:	6013      	str	r3, [r2, #0]
	  prevTime = currTime;
 80012ee:	4b40      	ldr	r3, [pc, #256]	; (80013f0 <main+0x1a0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a44      	ldr	r2, [pc, #272]	; (8001404 <main+0x1b4>)
 80012f4:	6013      	str	r3, [r2, #0]
	  gyroAngle = (float)Gx*loopTime/1000;
 80012f6:	4b44      	ldr	r3, [pc, #272]	; (8001408 <main+0x1b8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001302:	4b42      	ldr	r3, [pc, #264]	; (800140c <main+0x1bc>)
 8001304:	edd3 7a00 	vldr	s15, [r3]
 8001308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800130c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001410 <main+0x1c0>
 8001310:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001314:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <main+0x1c4>)
 8001316:	edc3 7a00 	vstr	s15, [r3]
	  currentAngle = 0.95*(currentAngle + gyroAngle) + 0.05*(accAngle);
 800131a:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <main+0x1c8>)
 800131c:	ed93 7a00 	vldr	s14, [r3]
 8001320:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <main+0x1c4>)
 8001322:	edd3 7a00 	vldr	s15, [r3]
 8001326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132a:	ee17 0a90 	vmov	r0, s15
 800132e:	f7ff f8cf 	bl	80004d0 <__aeabi_f2d>
 8001332:	a329      	add	r3, pc, #164	; (adr r3, 80013d8 <main+0x188>)
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	f7ff f922 	bl	8000580 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4614      	mov	r4, r2
 8001342:	461d      	mov	r5, r3
 8001344:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <main+0x1b0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8c1 	bl	80004d0 <__aeabi_f2d>
 800134e:	a324      	add	r3, pc, #144	; (adr r3, 80013e0 <main+0x190>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff f914 	bl	8000580 <__aeabi_dmul>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4620      	mov	r0, r4
 800135e:	4629      	mov	r1, r5
 8001360:	f7fe ff58 	bl	8000214 <__adddf3>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	f7ff fba2 	bl	8000ab4 <__aeabi_d2f>
 8001370:	4603      	mov	r3, r0
 8001372:	4a29      	ldr	r2, [pc, #164]	; (8001418 <main+0x1c8>)
 8001374:	6013      	str	r3, [r2, #0]
	  //x=*DWT_CYCCNT;
	  HAL_GPIO_WritePin(DIR_PORT_O, DIR_PIN_O, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2110      	movs	r1, #16
 800137a:	4828      	ldr	r0, [pc, #160]	; (800141c <main+0x1cc>)
 800137c:	f001 f9f4 	bl	8002768 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DIR_PORT_B, DIR_PIN_B, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001386:	4826      	ldr	r0, [pc, #152]	; (8001420 <main+0x1d0>)
 8001388:	f001 f9ee 	bl	8002768 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(STEP_PORT_O, STEP_PIN_O, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001392:	4823      	ldr	r0, [pc, #140]	; (8001420 <main+0x1d0>)
 8001394:	f001 f9e8 	bl	8002768 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(STEP_PORT_B, STEP_PIN_B, GPIO_PIN_SET);
 8001398:	2201      	movs	r2, #1
 800139a:	2120      	movs	r1, #32
 800139c:	481f      	ldr	r0, [pc, #124]	; (800141c <main+0x1cc>)
 800139e:	f001 f9e3 	bl	8002768 <HAL_GPIO_WritePin>
	  microDelay(stepDelay);
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <main+0x1d4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fd55 	bl	8000e58 <microDelay>
	  HAL_GPIO_WritePin(STEP_PORT_O, STEP_PIN_O, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b4:	481a      	ldr	r0, [pc, #104]	; (8001420 <main+0x1d0>)
 80013b6:	f001 f9d7 	bl	8002768 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(STEP_PORT_B, STEP_PIN_B, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2120      	movs	r1, #32
 80013be:	4817      	ldr	r0, [pc, #92]	; (800141c <main+0x1cc>)
 80013c0:	f001 f9d2 	bl	8002768 <HAL_GPIO_WritePin>
	  microDelay(stepDelay);
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <main+0x1d4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fd44 	bl	8000e58 <microDelay>
	  currTime = HAL_GetTick();
 80013d0:	e758      	b.n	8001284 <main+0x34>
 80013d2:	bf00      	nop
 80013d4:	f3af 8000 	nop.w
 80013d8:	66666666 	.word	0x66666666
 80013dc:	3fee6666 	.word	0x3fee6666
 80013e0:	9999999a 	.word	0x9999999a
 80013e4:	3fa99999 	.word	0x3fa99999
 80013e8:	200000f4 	.word	0x200000f4
 80013ec:	2000013c 	.word	0x2000013c
 80013f0:	20000208 	.word	0x20000208
 80013f4:	200001d8 	.word	0x200001d8
 80013f8:	200001dc 	.word	0x200001dc
 80013fc:	20000010 	.word	0x20000010
 8001400:	200001fc 	.word	0x200001fc
 8001404:	2000020c 	.word	0x2000020c
 8001408:	20000210 	.word	0x20000210
 800140c:	200001e0 	.word	0x200001e0
 8001410:	447a0000 	.word	0x447a0000
 8001414:	20000200 	.word	0x20000200
 8001418:	20000204 	.word	0x20000204
 800141c:	40020400 	.word	0x40020400
 8001420:	40020000 	.word	0x40020000
 8001424:	20000000 	.word	0x20000000

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b094      	sub	sp, #80	; 0x50
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	2234      	movs	r2, #52	; 0x34
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f003 ff78 	bl	800532c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <SystemClock_Config+0xdc>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	4a2b      	ldr	r2, [pc, #172]	; (8001504 <SystemClock_Config+0xdc>)
 8001456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145a:	6413      	str	r3, [r2, #64]	; 0x40
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <SystemClock_Config+0xdc>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001468:	2300      	movs	r3, #0
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	4b26      	ldr	r3, [pc, #152]	; (8001508 <SystemClock_Config+0xe0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a25      	ldr	r2, [pc, #148]	; (8001508 <SystemClock_Config+0xe0>)
 8001472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <SystemClock_Config+0xe0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001484:	2301      	movs	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800148c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148e:	2302      	movs	r3, #2
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001492:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001496:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001498:	2304      	movs	r3, #4
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800149c:	23b4      	movs	r3, #180	; 0xb4
 800149e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014a8:	2302      	movs	r3, #2
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 fccd 	bl	8003e50 <HAL_RCC_OscConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014bc:	f000 f9aa 	bl	8001814 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014c0:	f002 f92c 	bl	800371c <HAL_PWREx_EnableOverDrive>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014ca:	f000 f9a3 	bl	8001814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ce:	230f      	movs	r3, #15
 80014d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d2:	2302      	movs	r3, #2
 80014d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	2105      	movs	r1, #5
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 f965 	bl	80037bc <HAL_RCC_ClockConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80014f8:	f000 f98c 	bl	8001814 <Error_Handler>
  }
}
 80014fc:	bf00      	nop
 80014fe:	3750      	adds	r7, #80	; 0x50
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40007000 	.word	0x40007000

0800150c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_I2C1_Init+0x50>)
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <MX_I2C1_Init+0x54>)
 8001514:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_I2C1_Init+0x50>)
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <MX_I2C1_Init+0x58>)
 800151a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_I2C1_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_I2C1_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_I2C1_Init+0x50>)
 800152a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800152e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <MX_I2C1_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_I2C1_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <MX_I2C1_Init+0x50>)
 800154a:	f001 f927 	bl	800279c <HAL_I2C_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001554:	f000 f95e 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000040 	.word	0x20000040
 8001560:	40005400 	.word	0x40005400
 8001564:	000186a0 	.word	0x000186a0

08001568 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	463b      	mov	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MX_TIM1_Init+0x98>)
 8001586:	4a1f      	ldr	r2, [pc, #124]	; (8001604 <MX_TIM1_Init+0x9c>)
 8001588:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_TIM1_Init+0x98>)
 800158c:	2247      	movs	r2, #71	; 0x47
 800158e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_TIM1_Init+0x98>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_TIM1_Init+0x98>)
 8001598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800159c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_TIM1_Init+0x98>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_TIM1_Init+0x98>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_TIM1_Init+0x98>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015b0:	4813      	ldr	r0, [pc, #76]	; (8001600 <MX_TIM1_Init+0x98>)
 80015b2:	f002 feeb 	bl	800438c <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015bc:	f000 f92a 	bl	8001814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	4619      	mov	r1, r3
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <MX_TIM1_Init+0x98>)
 80015ce:	f003 f90d 	bl	80047ec <HAL_TIM_ConfigClockSource>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80015d8:	f000 f91c 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_TIM1_Init+0x98>)
 80015ea:	f003 fb29 	bl	8004c40 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015f4:	f000 f90e 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200000f4 	.word	0x200000f4
 8001604:	40010000 	.word	0x40010000

08001608 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160e:	463b      	mov	r3, r7
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <MX_TIM7_Init+0x64>)
 8001618:	4a15      	ldr	r2, [pc, #84]	; (8001670 <MX_TIM7_Init+0x68>)
 800161a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 720-1;
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <MX_TIM7_Init+0x64>)
 800161e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001622:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_TIM7_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <MX_TIM7_Init+0x64>)
 800162c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001630:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_TIM7_Init+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001638:	480c      	ldr	r0, [pc, #48]	; (800166c <MX_TIM7_Init+0x64>)
 800163a:	f002 fea7 	bl	800438c <HAL_TIM_Base_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001644:	f000 f8e6 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001650:	463b      	mov	r3, r7
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_TIM7_Init+0x64>)
 8001656:	f003 faf3 	bl	8004c40 <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001660:	f000 f8d8 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	2000013c 	.word	0x2000013c
 8001670:	40001400 	.word	0x40001400

08001674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <MX_USART2_UART_Init+0x50>)
 800167c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 80016ac:	f003 fb58 	bl	8004d60 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016b6:	f000 f8ad 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000184 	.word	0x20000184
 80016c4:	40004400 	.word	0x40004400

080016c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_DMA_Init+0x3c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <MX_DMA_Init+0x3c>)
 80016d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_DMA_Init+0x3c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	200b      	movs	r0, #11
 80016f0:	f000 fb85 	bl	8001dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016f4:	200b      	movs	r0, #11
 80016f6:	f000 fb9e 	bl	8001e36 <HAL_NVIC_EnableIRQ>

}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b38      	ldr	r3, [pc, #224]	; (8001804 <MX_GPIO_Init+0xfc>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a37      	ldr	r2, [pc, #220]	; (8001804 <MX_GPIO_Init+0xfc>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b35      	ldr	r3, [pc, #212]	; (8001804 <MX_GPIO_Init+0xfc>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b31      	ldr	r3, [pc, #196]	; (8001804 <MX_GPIO_Init+0xfc>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a30      	ldr	r2, [pc, #192]	; (8001804 <MX_GPIO_Init+0xfc>)
 8001744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <MX_GPIO_Init+0xfc>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <MX_GPIO_Init+0xfc>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a29      	ldr	r2, [pc, #164]	; (8001804 <MX_GPIO_Init+0xfc>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b27      	ldr	r3, [pc, #156]	; (8001804 <MX_GPIO_Init+0xfc>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <MX_GPIO_Init+0xfc>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a22      	ldr	r2, [pc, #136]	; (8001804 <MX_GPIO_Init+0xfc>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <MX_GPIO_Init+0xfc>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001794:	481c      	ldr	r0, [pc, #112]	; (8001808 <MX_GPIO_Init+0x100>)
 8001796:	f000 ffe7 	bl	8002768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2130      	movs	r1, #48	; 0x30
 800179e:	481b      	ldr	r0, [pc, #108]	; (800180c <MX_GPIO_Init+0x104>)
 80017a0:	f000 ffe2 	bl	8002768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	4815      	ldr	r0, [pc, #84]	; (8001810 <MX_GPIO_Init+0x108>)
 80017bc:	f000 fe40 	bl	8002440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80017c0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <MX_GPIO_Init+0x100>)
 80017da:	f000 fe31 	bl	8002440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017de:	2330      	movs	r3, #48	; 0x30
 80017e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_GPIO_Init+0x104>)
 80017f6:	f000 fe23 	bl	8002440 <HAL_GPIO_Init>

}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40020000 	.word	0x40020000
 800180c:	40020400 	.word	0x40020400
 8001810:	40020800 	.word	0x40020800

08001814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
}
 800181a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800181c:	e7fe      	b.n	800181c <Error_Handler+0x8>
	...

08001820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_MspInit+0x4c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a0f      	ldr	r2, [pc, #60]	; (800186c <HAL_MspInit+0x4c>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_MspInit+0x4c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_MspInit+0x4c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a08      	ldr	r2, [pc, #32]	; (800186c <HAL_MspInit+0x4c>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_MspInit+0x4c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800185e:	2007      	movs	r0, #7
 8001860:	f000 fac2 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800

08001870 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a30      	ldr	r2, [pc, #192]	; (8001950 <HAL_I2C_MspInit+0xe0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d15a      	bne.n	8001948 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <HAL_I2C_MspInit+0xe4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a2e      	ldr	r2, [pc, #184]	; (8001954 <HAL_I2C_MspInit+0xe4>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <HAL_I2C_MspInit+0xe4>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018ae:	23c0      	movs	r3, #192	; 0xc0
 80018b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b2:	2312      	movs	r3, #18
 80018b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018be:	2304      	movs	r3, #4
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4823      	ldr	r0, [pc, #140]	; (8001958 <HAL_I2C_MspInit+0xe8>)
 80018ca:	f000 fdb9 	bl	8002440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <HAL_I2C_MspInit+0xe4>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a1f      	ldr	r2, [pc, #124]	; (8001954 <HAL_I2C_MspInit+0xe4>)
 80018d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_I2C_MspInit+0xe4>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <HAL_I2C_MspInit+0xec>)
 80018ec:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <HAL_I2C_MspInit+0xf0>)
 80018ee:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80018f0:	4b1a      	ldr	r3, [pc, #104]	; (800195c <HAL_I2C_MspInit+0xec>)
 80018f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_I2C_MspInit+0xec>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <HAL_I2C_MspInit+0xec>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001904:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_I2C_MspInit+0xec>)
 8001906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800190a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <HAL_I2C_MspInit+0xec>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_I2C_MspInit+0xec>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001918:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_I2C_MspInit+0xec>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <HAL_I2C_MspInit+0xec>)
 8001920:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001924:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <HAL_I2C_MspInit+0xec>)
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800192c:	480b      	ldr	r0, [pc, #44]	; (800195c <HAL_I2C_MspInit+0xec>)
 800192e:	f000 fa9d 	bl	8001e6c <HAL_DMA_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001938:	f7ff ff6c 	bl	8001814 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a07      	ldr	r2, [pc, #28]	; (800195c <HAL_I2C_MspInit+0xec>)
 8001940:	639a      	str	r2, [r3, #56]	; 0x38
 8001942:	4a06      	ldr	r2, [pc, #24]	; (800195c <HAL_I2C_MspInit+0xec>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	3728      	adds	r7, #40	; 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40005400 	.word	0x40005400
 8001954:	40023800 	.word	0x40023800
 8001958:	40020400 	.word	0x40020400
 800195c:	20000094 	.word	0x20000094
 8001960:	40026010 	.word	0x40026010

08001964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a18      	ldr	r2, [pc, #96]	; (80019d4 <HAL_TIM_Base_MspInit+0x70>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d10e      	bne.n	8001994 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_TIM_Base_MspInit+0x74>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a16      	ldr	r2, [pc, #88]	; (80019d8 <HAL_TIM_Base_MspInit+0x74>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_TIM_Base_MspInit+0x74>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001992:	e01a      	b.n	80019ca <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_TIM_Base_MspInit+0x78>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d115      	bne.n	80019ca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_TIM_Base_MspInit+0x74>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <HAL_TIM_Base_MspInit+0x74>)
 80019a8:	f043 0320 	orr.w	r3, r3, #32
 80019ac:	6413      	str	r3, [r2, #64]	; 0x40
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_TIM_Base_MspInit+0x74>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 0320 	and.w	r3, r3, #32
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2100      	movs	r1, #0
 80019be:	2037      	movs	r0, #55	; 0x37
 80019c0:	f000 fa1d 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019c4:	2037      	movs	r0, #55	; 0x37
 80019c6:	f000 fa36 	bl	8001e36 <HAL_NVIC_EnableIRQ>
}
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40010000 	.word	0x40010000
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40001400 	.word	0x40001400

080019e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a19      	ldr	r2, [pc, #100]	; (8001a64 <HAL_UART_MspInit+0x84>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d12b      	bne.n	8001a5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_UART_MspInit+0x88>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a17      	ldr	r2, [pc, #92]	; (8001a68 <HAL_UART_MspInit+0x88>)
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_UART_MspInit+0x88>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_UART_MspInit+0x88>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <HAL_UART_MspInit+0x88>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_UART_MspInit+0x88>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a3a:	230c      	movs	r3, #12
 8001a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	; (8001a6c <HAL_UART_MspInit+0x8c>)
 8001a56:	f000 fcf3 	bl	8002440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	; 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40004400 	.word	0x40004400
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020000 	.word	0x40020000

08001a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <NMI_Handler+0x4>

08001a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <HardFault_Handler+0x4>

08001a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <MemManage_Handler+0x4>

08001a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abc:	f000 f8a4 	bl	8001c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <DMA1_Stream0_IRQHandler+0x10>)
 8001aca:	f000 fa7d 	bl	8001fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000094 	.word	0x20000094

08001ad8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <TIM7_IRQHandler+0x10>)
 8001ade:	f002 fd7d 	bl	80045dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000013c 	.word	0x2000013c

08001aec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <SystemInit+0x20>)
 8001af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af6:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <SystemInit+0x20>)
 8001af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b14:	480d      	ldr	r0, [pc, #52]	; (8001b4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b16:	490e      	ldr	r1, [pc, #56]	; (8001b50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b18:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b1c:	e002      	b.n	8001b24 <LoopCopyDataInit>

08001b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b22:	3304      	adds	r3, #4

08001b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b28:	d3f9      	bcc.n	8001b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2a:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b2c:	4c0b      	ldr	r4, [pc, #44]	; (8001b5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b30:	e001      	b.n	8001b36 <LoopFillZerobss>

08001b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b34:	3204      	adds	r2, #4

08001b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b38:	d3fb      	bcc.n	8001b32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b3a:	f7ff ffd7 	bl	8001aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b3e:	f003 fbd1 	bl	80052e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b42:	f7ff fb85 	bl	8001250 <main>
  bx  lr    
 8001b46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b50:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001b54:	080058e8 	.word	0x080058e8
  ldr r2, =_sbss
 8001b58:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001b5c:	20000218 	.word	0x20000218

08001b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <ADC_IRQHandler>
	...

08001b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ba4 <HAL_Init+0x40>)
 8001b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <HAL_Init+0x40>)
 8001b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <HAL_Init+0x40>)
 8001b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f000 f92b 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f000 f808 	bl	8001ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b98:	f7ff fe42 	bl	8001820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023c00 	.word	0x40023c00

08001ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_InitTick+0x54>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x58>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f943 	bl	8001e52 <HAL_SYSTICK_Config>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00e      	b.n	8001bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d80a      	bhi.n	8001bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f000 f90b 	bl	8001dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be8:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <HAL_InitTick+0x5c>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e000      	b.n	8001bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000018 	.word	0x20000018
 8001c00:	20000020 	.word	0x20000020
 8001c04:	2000001c 	.word	0x2000001c

08001c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x20>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x24>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_IncTick+0x24>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000020 	.word	0x20000020
 8001c2c:	20000214 	.word	0x20000214

08001c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return uwTick;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_GetTick+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000214 	.word	0x20000214

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db0b      	blt.n	8001cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <__NVIC_EnableIRQ+0x38>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db4:	d301      	bcc.n	8001dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <SysTick_Config+0x40>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f7ff ff8e 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <SysTick_Config+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SysTick_Config+0x40>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff29 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e10:	f7ff ff3e 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f7ff ff8e 	bl	8001d3c <NVIC_EncodePriority>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff5d 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff31 	bl	8001cac <__NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffa2 	bl	8001da4 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff feda 	bl	8001c30 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e099      	b.n	8001fbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea8:	e00f      	b.n	8001eca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eaa:	f7ff fec1 	bl	8001c30 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d908      	bls.n	8001eca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e078      	b.n	8001fbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1e8      	bne.n	8001eaa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <HAL_DMA_Init+0x158>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d107      	bne.n	8001f34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f023 0307 	bic.w	r3, r3, #7
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d117      	bne.n	8001f8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00e      	beq.n	8001f8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f9e9 	bl	8002348 <DMA_CheckFifoParam>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2240      	movs	r2, #64	; 0x40
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e016      	b.n	8001fbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f9a0 	bl	80022dc <DMA_CalcBaseAndBitshift>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa4:	223f      	movs	r2, #63	; 0x3f
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	f010803f 	.word	0xf010803f

08001fc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fd4:	4b8e      	ldr	r3, [pc, #568]	; (8002210 <HAL_DMA_IRQHandler+0x248>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a8e      	ldr	r2, [pc, #568]	; (8002214 <HAL_DMA_IRQHandler+0x24c>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	0a9b      	lsrs	r3, r3, #10
 8001fe0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d01a      	beq.n	8002034 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d013      	beq.n	8002034 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0204 	bic.w	r2, r2, #4
 800201a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	2208      	movs	r2, #8
 8002022:	409a      	lsls	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2201      	movs	r2, #1
 800203a:	409a      	lsls	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d012      	beq.n	800206a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00b      	beq.n	800206a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	2201      	movs	r2, #1
 8002058:	409a      	lsls	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002062:	f043 0202 	orr.w	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2204      	movs	r2, #4
 8002070:	409a      	lsls	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d012      	beq.n	80020a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00b      	beq.n	80020a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	2204      	movs	r2, #4
 800208e:	409a      	lsls	r2, r3
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	f043 0204 	orr.w	r2, r3, #4
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	2210      	movs	r2, #16
 80020a6:	409a      	lsls	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d043      	beq.n	8002138 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d03c      	beq.n	8002138 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	2210      	movs	r2, #16
 80020c4:	409a      	lsls	r2, r3
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d018      	beq.n	800210a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d108      	bne.n	80020f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d024      	beq.n	8002138 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	4798      	blx	r3
 80020f6:	e01f      	b.n	8002138 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01b      	beq.n	8002138 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	4798      	blx	r3
 8002108:	e016      	b.n	8002138 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002114:	2b00      	cmp	r3, #0
 8002116:	d107      	bne.n	8002128 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0208 	bic.w	r2, r2, #8
 8002126:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	2220      	movs	r2, #32
 800213e:	409a      	lsls	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 808f 	beq.w	8002268 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0310 	and.w	r3, r3, #16
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8087 	beq.w	8002268 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	2220      	movs	r2, #32
 8002160:	409a      	lsls	r2, r3
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b05      	cmp	r3, #5
 8002170:	d136      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0216 	bic.w	r2, r2, #22
 8002180:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002190:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	d103      	bne.n	80021a2 <HAL_DMA_IRQHandler+0x1da>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0208 	bic.w	r2, r2, #8
 80021b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b6:	223f      	movs	r2, #63	; 0x3f
 80021b8:	409a      	lsls	r2, r3
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d07e      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	4798      	blx	r3
        }
        return;
 80021de:	e079      	b.n	80022d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d01d      	beq.n	800222a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10d      	bne.n	8002218 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	2b00      	cmp	r3, #0
 8002202:	d031      	beq.n	8002268 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
 800220c:	e02c      	b.n	8002268 <HAL_DMA_IRQHandler+0x2a0>
 800220e:	bf00      	nop
 8002210:	20000018 	.word	0x20000018
 8002214:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221c:	2b00      	cmp	r3, #0
 800221e:	d023      	beq.n	8002268 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
 8002228:	e01e      	b.n	8002268 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10f      	bne.n	8002258 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0210 	bic.w	r2, r2, #16
 8002246:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226c:	2b00      	cmp	r3, #0
 800226e:	d032      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d022      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2205      	movs	r2, #5
 8002280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0201 	bic.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	3301      	adds	r3, #1
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	429a      	cmp	r2, r3
 800229e:	d307      	bcc.n	80022b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f2      	bne.n	8002294 <HAL_DMA_IRQHandler+0x2cc>
 80022ae:	e000      	b.n	80022b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	4798      	blx	r3
 80022d2:	e000      	b.n	80022d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80022d4:	bf00      	nop
    }
  }
}
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	3b10      	subs	r3, #16
 80022ec:	4a14      	ldr	r2, [pc, #80]	; (8002340 <DMA_CalcBaseAndBitshift+0x64>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022f6:	4a13      	ldr	r2, [pc, #76]	; (8002344 <DMA_CalcBaseAndBitshift+0x68>)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d909      	bls.n	800231e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	1d1a      	adds	r2, r3, #4
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	659a      	str	r2, [r3, #88]	; 0x58
 800231c:	e007      	b.n	800232e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002326:	f023 0303 	bic.w	r3, r3, #3
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	aaaaaaab 	.word	0xaaaaaaab
 8002344:	08005860 	.word	0x08005860

08002348 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d11f      	bne.n	80023a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d856      	bhi.n	8002416 <DMA_CheckFifoParam+0xce>
 8002368:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <DMA_CheckFifoParam+0x28>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	08002381 	.word	0x08002381
 8002374:	08002393 	.word	0x08002393
 8002378:	08002381 	.word	0x08002381
 800237c:	08002417 	.word	0x08002417
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d046      	beq.n	800241a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002390:	e043      	b.n	800241a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800239a:	d140      	bne.n	800241e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a0:	e03d      	b.n	800241e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023aa:	d121      	bne.n	80023f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d837      	bhi.n	8002422 <DMA_CheckFifoParam+0xda>
 80023b2:	a201      	add	r2, pc, #4	; (adr r2, 80023b8 <DMA_CheckFifoParam+0x70>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	080023c9 	.word	0x080023c9
 80023bc:	080023cf 	.word	0x080023cf
 80023c0:	080023c9 	.word	0x080023c9
 80023c4:	080023e1 	.word	0x080023e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      break;
 80023cc:	e030      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d025      	beq.n	8002426 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023de:	e022      	b.n	8002426 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023e8:	d11f      	bne.n	800242a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023ee:	e01c      	b.n	800242a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d903      	bls.n	80023fe <DMA_CheckFifoParam+0xb6>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d003      	beq.n	8002404 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023fc:	e018      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      break;
 8002402:	e015      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00e      	beq.n	800242e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      break;
 8002414:	e00b      	b.n	800242e <DMA_CheckFifoParam+0xe6>
      break;
 8002416:	bf00      	nop
 8002418:	e00a      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
 800241c:	e008      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
 8002420:	e006      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e004      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
 8002428:	e002      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;   
 800242a:	bf00      	nop
 800242c:	e000      	b.n	8002430 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
    }
  } 
  
  return status; 
 8002430:	7bfb      	ldrb	r3, [r7, #15]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop

08002440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	e165      	b.n	8002728 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800245c:	2201      	movs	r2, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	429a      	cmp	r2, r3
 8002476:	f040 8154 	bne.w	8002722 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b01      	cmp	r3, #1
 8002484:	d005      	beq.n	8002492 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248e:	2b02      	cmp	r3, #2
 8002490:	d130      	bne.n	80024f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c8:	2201      	movs	r2, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 0201 	and.w	r2, r3, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d017      	beq.n	8002530 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d123      	bne.n	8002584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	08da      	lsrs	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3208      	adds	r2, #8
 8002544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	08da      	lsrs	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3208      	adds	r2, #8
 800257e:	69b9      	ldr	r1, [r7, #24]
 8002580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0203 	and.w	r2, r3, #3
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80ae 	beq.w	8002722 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <HAL_GPIO_Init+0x300>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	4a5c      	ldr	r2, [pc, #368]	; (8002740 <HAL_GPIO_Init+0x300>)
 80025d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d4:	6453      	str	r3, [r2, #68]	; 0x44
 80025d6:	4b5a      	ldr	r3, [pc, #360]	; (8002740 <HAL_GPIO_Init+0x300>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025e2:	4a58      	ldr	r2, [pc, #352]	; (8002744 <HAL_GPIO_Init+0x304>)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	220f      	movs	r2, #15
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4f      	ldr	r2, [pc, #316]	; (8002748 <HAL_GPIO_Init+0x308>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d025      	beq.n	800265a <HAL_GPIO_Init+0x21a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4e      	ldr	r2, [pc, #312]	; (800274c <HAL_GPIO_Init+0x30c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01f      	beq.n	8002656 <HAL_GPIO_Init+0x216>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4d      	ldr	r2, [pc, #308]	; (8002750 <HAL_GPIO_Init+0x310>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d019      	beq.n	8002652 <HAL_GPIO_Init+0x212>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4c      	ldr	r2, [pc, #304]	; (8002754 <HAL_GPIO_Init+0x314>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d013      	beq.n	800264e <HAL_GPIO_Init+0x20e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4b      	ldr	r2, [pc, #300]	; (8002758 <HAL_GPIO_Init+0x318>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00d      	beq.n	800264a <HAL_GPIO_Init+0x20a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4a      	ldr	r2, [pc, #296]	; (800275c <HAL_GPIO_Init+0x31c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <HAL_GPIO_Init+0x206>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a49      	ldr	r2, [pc, #292]	; (8002760 <HAL_GPIO_Init+0x320>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d101      	bne.n	8002642 <HAL_GPIO_Init+0x202>
 800263e:	2306      	movs	r3, #6
 8002640:	e00c      	b.n	800265c <HAL_GPIO_Init+0x21c>
 8002642:	2307      	movs	r3, #7
 8002644:	e00a      	b.n	800265c <HAL_GPIO_Init+0x21c>
 8002646:	2305      	movs	r3, #5
 8002648:	e008      	b.n	800265c <HAL_GPIO_Init+0x21c>
 800264a:	2304      	movs	r3, #4
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x21c>
 800264e:	2303      	movs	r3, #3
 8002650:	e004      	b.n	800265c <HAL_GPIO_Init+0x21c>
 8002652:	2302      	movs	r3, #2
 8002654:	e002      	b.n	800265c <HAL_GPIO_Init+0x21c>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x21c>
 800265a:	2300      	movs	r3, #0
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f002 0203 	and.w	r2, r2, #3
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	4093      	lsls	r3, r2
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800266c:	4935      	ldr	r1, [pc, #212]	; (8002744 <HAL_GPIO_Init+0x304>)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267a:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_GPIO_Init+0x324>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800269e:	4a31      	ldr	r2, [pc, #196]	; (8002764 <HAL_GPIO_Init+0x324>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a4:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <HAL_GPIO_Init+0x324>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c8:	4a26      	ldr	r2, [pc, #152]	; (8002764 <HAL_GPIO_Init+0x324>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ce:	4b25      	ldr	r3, [pc, #148]	; (8002764 <HAL_GPIO_Init+0x324>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f2:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <HAL_GPIO_Init+0x324>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f8:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <HAL_GPIO_Init+0x324>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800271c:	4a11      	ldr	r2, [pc, #68]	; (8002764 <HAL_GPIO_Init+0x324>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3301      	adds	r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b0f      	cmp	r3, #15
 800272c:	f67f ae96 	bls.w	800245c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	40013800 	.word	0x40013800
 8002748:	40020000 	.word	0x40020000
 800274c:	40020400 	.word	0x40020400
 8002750:	40020800 	.word	0x40020800
 8002754:	40020c00 	.word	0x40020c00
 8002758:	40021000 	.word	0x40021000
 800275c:	40021400 	.word	0x40021400
 8002760:	40021800 	.word	0x40021800
 8002764:	40013c00 	.word	0x40013c00

08002768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
 8002774:	4613      	mov	r3, r2
 8002776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002778:	787b      	ldrb	r3, [r7, #1]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002784:	e003      	b.n	800278e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002786:	887b      	ldrh	r3, [r7, #2]
 8002788:	041a      	lsls	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	619a      	str	r2, [r3, #24]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e12b      	b.n	8002a06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff f854 	bl	8001870 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2224      	movs	r2, #36	; 0x24
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002800:	f001 f8ce 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8002804:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4a81      	ldr	r2, [pc, #516]	; (8002a10 <HAL_I2C_Init+0x274>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d807      	bhi.n	8002820 <HAL_I2C_Init+0x84>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a80      	ldr	r2, [pc, #512]	; (8002a14 <HAL_I2C_Init+0x278>)
 8002814:	4293      	cmp	r3, r2
 8002816:	bf94      	ite	ls
 8002818:	2301      	movls	r3, #1
 800281a:	2300      	movhi	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	e006      	b.n	800282e <HAL_I2C_Init+0x92>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a7d      	ldr	r2, [pc, #500]	; (8002a18 <HAL_I2C_Init+0x27c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	bf94      	ite	ls
 8002828:	2301      	movls	r3, #1
 800282a:	2300      	movhi	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e0e7      	b.n	8002a06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4a78      	ldr	r2, [pc, #480]	; (8002a1c <HAL_I2C_Init+0x280>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	0c9b      	lsrs	r3, r3, #18
 8002840:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a6a      	ldr	r2, [pc, #424]	; (8002a10 <HAL_I2C_Init+0x274>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d802      	bhi.n	8002870 <HAL_I2C_Init+0xd4>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	3301      	adds	r3, #1
 800286e:	e009      	b.n	8002884 <HAL_I2C_Init+0xe8>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	4a69      	ldr	r2, [pc, #420]	; (8002a20 <HAL_I2C_Init+0x284>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	3301      	adds	r3, #1
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	430b      	orrs	r3, r1
 800288a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002896:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	495c      	ldr	r1, [pc, #368]	; (8002a10 <HAL_I2C_Init+0x274>)
 80028a0:	428b      	cmp	r3, r1
 80028a2:	d819      	bhi.n	80028d8 <HAL_I2C_Init+0x13c>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	1e59      	subs	r1, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80028b2:	1c59      	adds	r1, r3, #1
 80028b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028b8:	400b      	ands	r3, r1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_I2C_Init+0x138>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1e59      	subs	r1, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d2:	e051      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 80028d4:	2304      	movs	r3, #4
 80028d6:	e04f      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d111      	bne.n	8002904 <HAL_I2C_Init+0x168>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1e58      	subs	r0, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	440b      	add	r3, r1
 80028ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	e012      	b.n	800292a <HAL_I2C_Init+0x18e>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1e58      	subs	r0, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	0099      	lsls	r1, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	fbb0 f3f3 	udiv	r3, r0, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Init+0x196>
 800292e:	2301      	movs	r3, #1
 8002930:	e022      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10e      	bne.n	8002958 <HAL_I2C_Init+0x1bc>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1e58      	subs	r0, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6859      	ldr	r1, [r3, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	440b      	add	r3, r1
 8002948:	fbb0 f3f3 	udiv	r3, r0, r3
 800294c:	3301      	adds	r3, #1
 800294e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002956:	e00f      	b.n	8002978 <HAL_I2C_Init+0x1dc>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e58      	subs	r0, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	0099      	lsls	r1, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	fbb0 f3f3 	udiv	r3, r0, r3
 800296e:	3301      	adds	r3, #1
 8002970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	6809      	ldr	r1, [r1, #0]
 800297c:	4313      	orrs	r3, r2
 800297e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6911      	ldr	r1, [r2, #16]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68d2      	ldr	r2, [r2, #12]
 80029b2:	4311      	orrs	r1, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	430b      	orrs	r3, r1
 80029ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	000186a0 	.word	0x000186a0
 8002a14:	001e847f 	.word	0x001e847f
 8002a18:	003d08ff 	.word	0x003d08ff
 8002a1c:	431bde83 	.word	0x431bde83
 8002a20:	10624dd3 	.word	0x10624dd3

08002a24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	4608      	mov	r0, r1
 8002a2e:	4611      	mov	r1, r2
 8002a30:	461a      	mov	r2, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	817b      	strh	r3, [r7, #10]
 8002a36:	460b      	mov	r3, r1
 8002a38:	813b      	strh	r3, [r7, #8]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a3e:	f7ff f8f7 	bl	8001c30 <HAL_GetTick>
 8002a42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	f040 80d9 	bne.w	8002c04 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2319      	movs	r3, #25
 8002a58:	2201      	movs	r2, #1
 8002a5a:	496d      	ldr	r1, [pc, #436]	; (8002c10 <HAL_I2C_Mem_Write+0x1ec>)
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fc7f 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e0cc      	b.n	8002c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_I2C_Mem_Write+0x56>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e0c5      	b.n	8002c06 <HAL_I2C_Mem_Write+0x1e2>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d007      	beq.n	8002aa0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2221      	movs	r2, #33	; 0x21
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2240      	movs	r2, #64	; 0x40
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a3a      	ldr	r2, [r7, #32]
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a4d      	ldr	r2, [pc, #308]	; (8002c14 <HAL_I2C_Mem_Write+0x1f0>)
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ae2:	88f8      	ldrh	r0, [r7, #6]
 8002ae4:	893a      	ldrh	r2, [r7, #8]
 8002ae6:	8979      	ldrh	r1, [r7, #10]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	4603      	mov	r3, r0
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fab6 	bl	8003064 <I2C_RequestMemoryWrite>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d052      	beq.n	8002ba4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e081      	b.n	8002c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fd00 	bl	800350c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00d      	beq.n	8002b2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d107      	bne.n	8002b2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06b      	b.n	8002c06 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	781a      	ldrb	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d11b      	bne.n	8002ba4 <HAL_I2C_Mem_Write+0x180>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d017      	beq.n	8002ba4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1aa      	bne.n	8002b02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 fcec 	bl	800358e <I2C_WaitOnBTFFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00d      	beq.n	8002bd8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d107      	bne.n	8002bd4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e016      	b.n	8002c06 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e000      	b.n	8002c06 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
  }
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	00100002 	.word	0x00100002
 8002c14:	ffff0000 	.word	0xffff0000

08002c18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	; 0x30
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	4608      	mov	r0, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	461a      	mov	r2, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	817b      	strh	r3, [r7, #10]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	813b      	strh	r3, [r7, #8]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c32:	f7fe fffd 	bl	8001c30 <HAL_GetTick>
 8002c36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	f040 8208 	bne.w	8003056 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	2319      	movs	r3, #25
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	497b      	ldr	r1, [pc, #492]	; (8002e3c <HAL_I2C_Mem_Read+0x224>)
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fb85 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e1fb      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_I2C_Mem_Read+0x56>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e1f4      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d007      	beq.n	8002c94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2222      	movs	r2, #34	; 0x22
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2240      	movs	r2, #64	; 0x40
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a5b      	ldr	r2, [pc, #364]	; (8002e40 <HAL_I2C_Mem_Read+0x228>)
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cd6:	88f8      	ldrh	r0, [r7, #6]
 8002cd8:	893a      	ldrh	r2, [r7, #8]
 8002cda:	8979      	ldrh	r1, [r7, #10]
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 fa52 	bl	8003190 <I2C_RequestMemoryRead>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e1b0      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d113      	bne.n	8002d26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cfe:	2300      	movs	r3, #0
 8002d00:	623b      	str	r3, [r7, #32]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	623b      	str	r3, [r7, #32]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	623b      	str	r3, [r7, #32]
 8002d12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	e184      	b.n	8003030 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d11b      	bne.n	8002d66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e164      	b.n	8003030 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d11b      	bne.n	8002da6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	61bb      	str	r3, [r7, #24]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	e144      	b.n	8003030 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002dbc:	e138      	b.n	8003030 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	f200 80f1 	bhi.w	8002faa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d123      	bne.n	8002e18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fc1b 	bl	8003610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e139      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e16:	e10b      	b.n	8003030 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d14e      	bne.n	8002ebe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e26:	2200      	movs	r2, #0
 8002e28:	4906      	ldr	r1, [pc, #24]	; (8002e44 <HAL_I2C_Mem_Read+0x22c>)
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fa98 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e10e      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
 8002e3a:	bf00      	nop
 8002e3c:	00100002 	.word	0x00100002
 8002e40:	ffff0000 	.word	0xffff0000
 8002e44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ebc:	e0b8      	b.n	8003030 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	4966      	ldr	r1, [pc, #408]	; (8003060 <HAL_I2C_Mem_Read+0x448>)
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fa49 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0bf      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	2200      	movs	r2, #0
 8002f22:	494f      	ldr	r1, [pc, #316]	; (8003060 <HAL_I2C_Mem_Read+0x448>)
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fa1b 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e091      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fa8:	e042      	b.n	8003030 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 fb2e 	bl	8003610 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e04c      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d118      	bne.n	8003030 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	2b00      	cmp	r3, #0
 8003036:	f47f aec2 	bne.w	8002dbe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e000      	b.n	8003058 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
  }
}
 8003058:	4618      	mov	r0, r3
 800305a:	3728      	adds	r7, #40	; 0x28
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	00010004 	.word	0x00010004

08003064 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	4608      	mov	r0, r1
 800306e:	4611      	mov	r1, r2
 8003070:	461a      	mov	r2, r3
 8003072:	4603      	mov	r3, r0
 8003074:	817b      	strh	r3, [r7, #10]
 8003076:	460b      	mov	r3, r1
 8003078:	813b      	strh	r3, [r7, #8]
 800307a:	4613      	mov	r3, r2
 800307c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800308c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	2200      	movs	r2, #0
 8003096:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f960 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00d      	beq.n	80030c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b4:	d103      	bne.n	80030be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e05f      	b.n	8003182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030c2:	897b      	ldrh	r3, [r7, #10]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	6a3a      	ldr	r2, [r7, #32]
 80030d6:	492d      	ldr	r1, [pc, #180]	; (800318c <I2C_RequestMemoryWrite+0x128>)
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f998 	bl	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e04c      	b.n	8003182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003100:	6a39      	ldr	r1, [r7, #32]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fa02 	bl	800350c <I2C_WaitOnTXEFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00d      	beq.n	800312a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2b04      	cmp	r3, #4
 8003114:	d107      	bne.n	8003126 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003124:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e02b      	b.n	8003182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003130:	893b      	ldrh	r3, [r7, #8]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	611a      	str	r2, [r3, #16]
 800313a:	e021      	b.n	8003180 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800313c:	893b      	ldrh	r3, [r7, #8]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	b29b      	uxth	r3, r3
 8003142:	b2da      	uxtb	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800314a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314c:	6a39      	ldr	r1, [r7, #32]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f9dc 	bl	800350c <I2C_WaitOnTXEFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b04      	cmp	r3, #4
 8003160:	d107      	bne.n	8003172 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003170:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e005      	b.n	8003182 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003176:	893b      	ldrh	r3, [r7, #8]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	00010002 	.word	0x00010002

08003190 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	4608      	mov	r0, r1
 800319a:	4611      	mov	r1, r2
 800319c:	461a      	mov	r2, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	817b      	strh	r3, [r7, #10]
 80031a2:	460b      	mov	r3, r1
 80031a4:	813b      	strh	r3, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f8c2 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f0:	d103      	bne.n	80031fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0aa      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031fe:	897b      	ldrh	r3, [r7, #10]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800320c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	6a3a      	ldr	r2, [r7, #32]
 8003212:	4952      	ldr	r1, [pc, #328]	; (800335c <I2C_RequestMemoryRead+0x1cc>)
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f8fa 	bl	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e097      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	6a39      	ldr	r1, [r7, #32]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f964 	bl	800350c <I2C_WaitOnTXEFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	2b04      	cmp	r3, #4
 8003250:	d107      	bne.n	8003262 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003260:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e076      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800326c:	893b      	ldrh	r3, [r7, #8]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	611a      	str	r2, [r3, #16]
 8003276:	e021      	b.n	80032bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003278:	893b      	ldrh	r3, [r7, #8]
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	b29b      	uxth	r3, r3
 800327e:	b2da      	uxtb	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003288:	6a39      	ldr	r1, [r7, #32]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f93e 	bl	800350c <I2C_WaitOnTXEFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00d      	beq.n	80032b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	2b04      	cmp	r3, #4
 800329c:	d107      	bne.n	80032ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e050      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032b2:	893b      	ldrh	r3, [r7, #8]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	6a39      	ldr	r1, [r7, #32]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f923 	bl	800350c <I2C_WaitOnTXEFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d107      	bne.n	80032e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e035      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	2200      	movs	r2, #0
 8003300:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f82b 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00d      	beq.n	800332c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331e:	d103      	bne.n	8003328 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e013      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800332c:	897b      	ldrh	r3, [r7, #10]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	6a3a      	ldr	r2, [r7, #32]
 8003340:	4906      	ldr	r1, [pc, #24]	; (800335c <I2C_RequestMemoryRead+0x1cc>)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f863 	bl	800340e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	00010002 	.word	0x00010002

08003360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003370:	e025      	b.n	80033be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d021      	beq.n	80033be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337a:	f7fe fc59 	bl	8001c30 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d302      	bcc.n	8003390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d116      	bne.n	80033be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f043 0220 	orr.w	r2, r3, #32
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e023      	b.n	8003406 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d10d      	bne.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	43da      	mvns	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4013      	ands	r3, r2
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bf0c      	ite	eq
 80033da:	2301      	moveq	r3, #1
 80033dc:	2300      	movne	r3, #0
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	e00c      	b.n	80033fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4013      	ands	r3, r2
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bf0c      	ite	eq
 80033f6:	2301      	moveq	r3, #1
 80033f8:	2300      	movne	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	429a      	cmp	r2, r3
 8003402:	d0b6      	beq.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800341c:	e051      	b.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342c:	d123      	bne.n	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003446:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f043 0204 	orr.w	r2, r3, #4
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e046      	b.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d021      	beq.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7fe fbd7 	bl	8001c30 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d116      	bne.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f043 0220 	orr.w	r2, r3, #32
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e020      	b.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	0c1b      	lsrs	r3, r3, #16
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d10c      	bne.n	80034e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	43da      	mvns	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4013      	ands	r3, r2
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf14      	ite	ne
 80034de:	2301      	movne	r3, #1
 80034e0:	2300      	moveq	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	e00b      	b.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	43da      	mvns	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4013      	ands	r3, r2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d18d      	bne.n	800341e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003518:	e02d      	b.n	8003576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f8ce 	bl	80036bc <I2C_IsAcknowledgeFailed>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e02d      	b.n	8003586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d021      	beq.n	8003576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fe fb7d 	bl	8001c30 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d116      	bne.n	8003576 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e007      	b.n	8003586 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d1ca      	bne.n	800351a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800359a:	e02d      	b.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f88d 	bl	80036bc <I2C_IsAcknowledgeFailed>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e02d      	b.n	8003608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	d021      	beq.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b4:	f7fe fb3c 	bl	8001c30 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d302      	bcc.n	80035ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d116      	bne.n	80035f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e007      	b.n	8003608 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b04      	cmp	r3, #4
 8003604:	d1ca      	bne.n	800359c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800361c:	e042      	b.n	80036a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	2b10      	cmp	r3, #16
 800362a:	d119      	bne.n	8003660 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0210 	mvn.w	r2, #16
 8003634:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e029      	b.n	80036b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003660:	f7fe fae6 	bl	8001c30 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	429a      	cmp	r2, r3
 800366e:	d302      	bcc.n	8003676 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d116      	bne.n	80036a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f043 0220 	orr.w	r2, r3, #32
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e007      	b.n	80036b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d1b5      	bne.n	800361e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d2:	d11b      	bne.n	800370c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f043 0204 	orr.w	r2, r3, #4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <HAL_PWREx_EnableOverDrive+0x90>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	4a1f      	ldr	r2, [pc, #124]	; (80037ac <HAL_PWREx_EnableOverDrive+0x90>)
 8003730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003734:	6413      	str	r3, [r2, #64]	; 0x40
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <HAL_PWREx_EnableOverDrive+0x90>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003742:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003744:	2201      	movs	r2, #1
 8003746:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003748:	f7fe fa72 	bl	8001c30 <HAL_GetTick>
 800374c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800374e:	e009      	b.n	8003764 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003750:	f7fe fa6e 	bl	8001c30 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800375e:	d901      	bls.n	8003764 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e01f      	b.n	80037a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003764:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003770:	d1ee      	bne.n	8003750 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003772:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003778:	f7fe fa5a 	bl	8001c30 <HAL_GetTick>
 800377c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800377e:	e009      	b.n	8003794 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003780:	f7fe fa56 	bl	8001c30 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800378e:	d901      	bls.n	8003794 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e007      	b.n	80037a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003794:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037a0:	d1ee      	bne.n	8003780 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023800 	.word	0x40023800
 80037b0:	420e0040 	.word	0x420e0040
 80037b4:	40007000 	.word	0x40007000
 80037b8:	420e0044 	.word	0x420e0044

080037bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0cc      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037d0:	4b68      	ldr	r3, [pc, #416]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d90c      	bls.n	80037f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b65      	ldr	r3, [pc, #404]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b63      	ldr	r3, [pc, #396]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0b8      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d020      	beq.n	8003846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003810:	4b59      	ldr	r3, [pc, #356]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a58      	ldr	r2, [pc, #352]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800381a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003828:	4b53      	ldr	r3, [pc, #332]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4a52      	ldr	r2, [pc, #328]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003834:	4b50      	ldr	r3, [pc, #320]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	494d      	ldr	r1, [pc, #308]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d044      	beq.n	80038dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d119      	bne.n	800389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e07f      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d003      	beq.n	800387a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003876:	2b03      	cmp	r3, #3
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387a:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e06f      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388a:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e067      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389a:	4b37      	ldr	r3, [pc, #220]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f023 0203 	bic.w	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	4934      	ldr	r1, [pc, #208]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038ac:	f7fe f9c0 	bl	8001c30 <HAL_GetTick>
 80038b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b4:	f7fe f9bc 	bl	8001c30 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e04f      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 020c 	and.w	r2, r3, #12
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	429a      	cmp	r2, r3
 80038da:	d1eb      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038dc:	4b25      	ldr	r3, [pc, #148]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d20c      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b22      	ldr	r3, [pc, #136]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b20      	ldr	r3, [pc, #128]	; (8003974 <HAL_RCC_ClockConfig+0x1b8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e032      	b.n	800396a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4916      	ldr	r1, [pc, #88]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	490e      	ldr	r1, [pc, #56]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	4313      	orrs	r3, r2
 8003940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003942:	f000 f855 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 8003946:	4602      	mov	r2, r0
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	490a      	ldr	r1, [pc, #40]	; (800397c <HAL_RCC_ClockConfig+0x1c0>)
 8003954:	5ccb      	ldrb	r3, [r1, r3]
 8003956:	fa22 f303 	lsr.w	r3, r2, r3
 800395a:	4a09      	ldr	r2, [pc, #36]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800395e:	4b09      	ldr	r3, [pc, #36]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fe f920 	bl	8001ba8 <HAL_InitTick>

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40023c00 	.word	0x40023c00
 8003978:	40023800 	.word	0x40023800
 800397c:	08005848 	.word	0x08005848
 8003980:	20000018 	.word	0x20000018
 8003984:	2000001c 	.word	0x2000001c

08003988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <HAL_RCC_GetHCLKFreq+0x14>)
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000018 	.word	0x20000018

080039a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039a4:	f7ff fff0 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	0a9b      	lsrs	r3, r3, #10
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4903      	ldr	r1, [pc, #12]	; (80039c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40023800 	.word	0x40023800
 80039c4:	08005858 	.word	0x08005858

080039c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039cc:	f7ff ffdc 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	0b5b      	lsrs	r3, r3, #13
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	4903      	ldr	r1, [pc, #12]	; (80039ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40023800 	.word	0x40023800
 80039ec:	08005858 	.word	0x08005858

080039f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039f4:	b0ae      	sub	sp, #184	; 0xb8
 80039f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a16:	4bcb      	ldr	r3, [pc, #812]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b0c      	cmp	r3, #12
 8003a20:	f200 8206 	bhi.w	8003e30 <HAL_RCC_GetSysClockFreq+0x440>
 8003a24:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003a61 	.word	0x08003a61
 8003a30:	08003e31 	.word	0x08003e31
 8003a34:	08003e31 	.word	0x08003e31
 8003a38:	08003e31 	.word	0x08003e31
 8003a3c:	08003a69 	.word	0x08003a69
 8003a40:	08003e31 	.word	0x08003e31
 8003a44:	08003e31 	.word	0x08003e31
 8003a48:	08003e31 	.word	0x08003e31
 8003a4c:	08003a71 	.word	0x08003a71
 8003a50:	08003e31 	.word	0x08003e31
 8003a54:	08003e31 	.word	0x08003e31
 8003a58:	08003e31 	.word	0x08003e31
 8003a5c:	08003c61 	.word	0x08003c61
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a60:	4bb9      	ldr	r3, [pc, #740]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003a66:	e1e7      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a68:	4bb8      	ldr	r3, [pc, #736]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a6e:	e1e3      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a70:	4bb4      	ldr	r3, [pc, #720]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a7c:	4bb1      	ldr	r3, [pc, #708]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d071      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a88:	4bae      	ldr	r3, [pc, #696]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	099b      	lsrs	r3, r3, #6
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a94:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003aaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003aae:	4622      	mov	r2, r4
 8003ab0:	462b      	mov	r3, r5
 8003ab2:	f04f 0000 	mov.w	r0, #0
 8003ab6:	f04f 0100 	mov.w	r1, #0
 8003aba:	0159      	lsls	r1, r3, #5
 8003abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ac0:	0150      	lsls	r0, r2, #5
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	1a51      	subs	r1, r2, r1
 8003aca:	6439      	str	r1, [r7, #64]	; 0x40
 8003acc:	4629      	mov	r1, r5
 8003ace:	eb63 0301 	sbc.w	r3, r3, r1
 8003ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003ae0:	4649      	mov	r1, r9
 8003ae2:	018b      	lsls	r3, r1, #6
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aea:	4641      	mov	r1, r8
 8003aec:	018a      	lsls	r2, r1, #6
 8003aee:	4641      	mov	r1, r8
 8003af0:	1a51      	subs	r1, r2, r1
 8003af2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003af4:	4649      	mov	r1, r9
 8003af6:	eb63 0301 	sbc.w	r3, r3, r1
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003b08:	4649      	mov	r1, r9
 8003b0a:	00cb      	lsls	r3, r1, #3
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b12:	4641      	mov	r1, r8
 8003b14:	00ca      	lsls	r2, r1, #3
 8003b16:	4610      	mov	r0, r2
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	4622      	mov	r2, r4
 8003b1e:	189b      	adds	r3, r3, r2
 8003b20:	633b      	str	r3, [r7, #48]	; 0x30
 8003b22:	462b      	mov	r3, r5
 8003b24:	460a      	mov	r2, r1
 8003b26:	eb42 0303 	adc.w	r3, r2, r3
 8003b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b38:	4629      	mov	r1, r5
 8003b3a:	024b      	lsls	r3, r1, #9
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b42:	4621      	mov	r1, r4
 8003b44:	024a      	lsls	r2, r1, #9
 8003b46:	4610      	mov	r0, r2
 8003b48:	4619      	mov	r1, r3
 8003b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b58:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003b5c:	f7fc fffa 	bl	8000b54 <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4613      	mov	r3, r2
 8003b66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b6a:	e067      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6c:	4b75      	ldr	r3, [pc, #468]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	2200      	movs	r2, #0
 8003b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b78:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003b7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b84:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b86:	2300      	movs	r3, #0
 8003b88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b8a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003b8e:	4622      	mov	r2, r4
 8003b90:	462b      	mov	r3, r5
 8003b92:	f04f 0000 	mov.w	r0, #0
 8003b96:	f04f 0100 	mov.w	r1, #0
 8003b9a:	0159      	lsls	r1, r3, #5
 8003b9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba0:	0150      	lsls	r0, r2, #5
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	1a51      	subs	r1, r2, r1
 8003baa:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bac:	4629      	mov	r1, r5
 8003bae:	eb63 0301 	sbc.w	r3, r3, r1
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	018b      	lsls	r3, r1, #6
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bca:	4641      	mov	r1, r8
 8003bcc:	018a      	lsls	r2, r1, #6
 8003bce:	4641      	mov	r1, r8
 8003bd0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bd4:	4649      	mov	r1, r9
 8003bd6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003be6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bee:	4692      	mov	sl, r2
 8003bf0:	469b      	mov	fp, r3
 8003bf2:	4623      	mov	r3, r4
 8003bf4:	eb1a 0303 	adds.w	r3, sl, r3
 8003bf8:	623b      	str	r3, [r7, #32]
 8003bfa:	462b      	mov	r3, r5
 8003bfc:	eb4b 0303 	adc.w	r3, fp, r3
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c0e:	4629      	mov	r1, r5
 8003c10:	028b      	lsls	r3, r1, #10
 8003c12:	4621      	mov	r1, r4
 8003c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c18:	4621      	mov	r1, r4
 8003c1a:	028a      	lsls	r2, r1, #10
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4619      	mov	r1, r3
 8003c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c24:	2200      	movs	r2, #0
 8003c26:	673b      	str	r3, [r7, #112]	; 0x70
 8003c28:	677a      	str	r2, [r7, #116]	; 0x74
 8003c2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c2e:	f7fc ff91 	bl	8000b54 <__aeabi_uldivmod>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4613      	mov	r3, r2
 8003c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c3c:	4b41      	ldr	r3, [pc, #260]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	3301      	adds	r3, #1
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003c4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c5e:	e0eb      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c60:	4b38      	ldr	r3, [pc, #224]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c6c:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d06b      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c78:	4b32      	ldr	r3, [pc, #200]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	099b      	lsrs	r3, r3, #6
 8003c7e:	2200      	movs	r2, #0
 8003c80:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	667b      	str	r3, [r7, #100]	; 0x64
 8003c90:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003c94:	4622      	mov	r2, r4
 8003c96:	462b      	mov	r3, r5
 8003c98:	f04f 0000 	mov.w	r0, #0
 8003c9c:	f04f 0100 	mov.w	r1, #0
 8003ca0:	0159      	lsls	r1, r3, #5
 8003ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca6:	0150      	lsls	r0, r2, #5
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4621      	mov	r1, r4
 8003cae:	1a51      	subs	r1, r2, r1
 8003cb0:	61b9      	str	r1, [r7, #24]
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	eb63 0301 	sbc.w	r3, r3, r1
 8003cb8:	61fb      	str	r3, [r7, #28]
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003cc6:	4659      	mov	r1, fp
 8003cc8:	018b      	lsls	r3, r1, #6
 8003cca:	4651      	mov	r1, sl
 8003ccc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cd0:	4651      	mov	r1, sl
 8003cd2:	018a      	lsls	r2, r1, #6
 8003cd4:	4651      	mov	r1, sl
 8003cd6:	ebb2 0801 	subs.w	r8, r2, r1
 8003cda:	4659      	mov	r1, fp
 8003cdc:	eb63 0901 	sbc.w	r9, r3, r1
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cf4:	4690      	mov	r8, r2
 8003cf6:	4699      	mov	r9, r3
 8003cf8:	4623      	mov	r3, r4
 8003cfa:	eb18 0303 	adds.w	r3, r8, r3
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	462b      	mov	r3, r5
 8003d02:	eb49 0303 	adc.w	r3, r9, r3
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d14:	4629      	mov	r1, r5
 8003d16:	024b      	lsls	r3, r1, #9
 8003d18:	4621      	mov	r1, r4
 8003d1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d1e:	4621      	mov	r1, r4
 8003d20:	024a      	lsls	r2, r1, #9
 8003d22:	4610      	mov	r0, r2
 8003d24:	4619      	mov	r1, r3
 8003d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d2e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d34:	f7fc ff0e 	bl	8000b54 <__aeabi_uldivmod>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d42:	e065      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x420>
 8003d44:	40023800 	.word	0x40023800
 8003d48:	00f42400 	.word	0x00f42400
 8003d4c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d50:	4b3d      	ldr	r3, [pc, #244]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	099b      	lsrs	r3, r3, #6
 8003d56:	2200      	movs	r2, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d60:	653b      	str	r3, [r7, #80]	; 0x50
 8003d62:	2300      	movs	r3, #0
 8003d64:	657b      	str	r3, [r7, #84]	; 0x54
 8003d66:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003d6a:	4642      	mov	r2, r8
 8003d6c:	464b      	mov	r3, r9
 8003d6e:	f04f 0000 	mov.w	r0, #0
 8003d72:	f04f 0100 	mov.w	r1, #0
 8003d76:	0159      	lsls	r1, r3, #5
 8003d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d7c:	0150      	lsls	r0, r2, #5
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4641      	mov	r1, r8
 8003d84:	1a51      	subs	r1, r2, r1
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	4649      	mov	r1, r9
 8003d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	018b      	lsls	r3, r1, #6
 8003da0:	4651      	mov	r1, sl
 8003da2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003da6:	4651      	mov	r1, sl
 8003da8:	018a      	lsls	r2, r1, #6
 8003daa:	4651      	mov	r1, sl
 8003dac:	1a54      	subs	r4, r2, r1
 8003dae:	4659      	mov	r1, fp
 8003db0:	eb63 0501 	sbc.w	r5, r3, r1
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	00eb      	lsls	r3, r5, #3
 8003dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dc2:	00e2      	lsls	r2, r4, #3
 8003dc4:	4614      	mov	r4, r2
 8003dc6:	461d      	mov	r5, r3
 8003dc8:	4643      	mov	r3, r8
 8003dca:	18e3      	adds	r3, r4, r3
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	464b      	mov	r3, r9
 8003dd0:	eb45 0303 	adc.w	r3, r5, r3
 8003dd4:	607b      	str	r3, [r7, #4]
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003de2:	4629      	mov	r1, r5
 8003de4:	028b      	lsls	r3, r1, #10
 8003de6:	4621      	mov	r1, r4
 8003de8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dec:	4621      	mov	r1, r4
 8003dee:	028a      	lsls	r2, r1, #10
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003df8:	2200      	movs	r2, #0
 8003dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dfc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003dfe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e02:	f7fc fea7 	bl	8000b54 <__aeabi_uldivmod>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e10:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	0f1b      	lsrs	r3, r3, #28
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003e1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e2e:	e003      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	37b8      	adds	r7, #184	; 0xb8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	00f42400 	.word	0x00f42400

08003e50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e28d      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8083 	beq.w	8003f76 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e70:	4b94      	ldr	r3, [pc, #592]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 030c 	and.w	r3, r3, #12
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d019      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e7c:	4b91      	ldr	r3, [pc, #580]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d106      	bne.n	8003e96 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e88:	4b8e      	ldr	r3, [pc, #568]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e94:	d00c      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e96:	4b8b      	ldr	r3, [pc, #556]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e9e:	2b0c      	cmp	r3, #12
 8003ea0:	d112      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ea2:	4b88      	ldr	r3, [pc, #544]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eae:	d10b      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb0:	4b84      	ldr	r3, [pc, #528]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d05b      	beq.n	8003f74 <HAL_RCC_OscConfig+0x124>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d157      	bne.n	8003f74 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e25a      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed0:	d106      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x90>
 8003ed2:	4b7c      	ldr	r3, [pc, #496]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a7b      	ldr	r2, [pc, #492]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	e01d      	b.n	8003f1c <HAL_RCC_OscConfig+0xcc>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCC_OscConfig+0xb4>
 8003eea:	4b76      	ldr	r3, [pc, #472]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a75      	ldr	r2, [pc, #468]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	4b73      	ldr	r3, [pc, #460]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a72      	ldr	r2, [pc, #456]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	e00b      	b.n	8003f1c <HAL_RCC_OscConfig+0xcc>
 8003f04:	4b6f      	ldr	r3, [pc, #444]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a6e      	ldr	r2, [pc, #440]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	4b6c      	ldr	r3, [pc, #432]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a6b      	ldr	r2, [pc, #428]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d013      	beq.n	8003f4c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fd fe84 	bl	8001c30 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f2c:	f7fd fe80 	bl	8001c30 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e21f      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	4b61      	ldr	r3, [pc, #388]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0xdc>
 8003f4a:	e014      	b.n	8003f76 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fd fe70 	bl	8001c30 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f54:	f7fd fe6c 	bl	8001c30 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	; 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e20b      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f66:	4b57      	ldr	r3, [pc, #348]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x104>
 8003f72:	e000      	b.n	8003f76 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d06f      	beq.n	8004062 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f82:	4b50      	ldr	r3, [pc, #320]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d017      	beq.n	8003fbe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f8e:	4b4d      	ldr	r3, [pc, #308]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d105      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f9a:	4b4a      	ldr	r3, [pc, #296]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa6:	4b47      	ldr	r3, [pc, #284]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003fae:	2b0c      	cmp	r3, #12
 8003fb0:	d11c      	bne.n	8003fec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb2:	4b44      	ldr	r3, [pc, #272]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d116      	bne.n	8003fec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbe:	4b41      	ldr	r3, [pc, #260]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x186>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e1d3      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd6:	4b3b      	ldr	r3, [pc, #236]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4937      	ldr	r1, [pc, #220]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fea:	e03a      	b.n	8004062 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff4:	4b34      	ldr	r3, [pc, #208]	; (80040c8 <HAL_RCC_OscConfig+0x278>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffa:	f7fd fe19 	bl	8001c30 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004002:	f7fd fe15 	bl	8001c30 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e1b4      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004014:	4b2b      	ldr	r3, [pc, #172]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	4b28      	ldr	r3, [pc, #160]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4925      	ldr	r1, [pc, #148]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
 8004034:	e015      	b.n	8004062 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004036:	4b24      	ldr	r3, [pc, #144]	; (80040c8 <HAL_RCC_OscConfig+0x278>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fd fdf8 	bl	8001c30 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004044:	f7fd fdf4 	bl	8001c30 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e193      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004056:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d036      	beq.n	80040dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004076:	4b15      	ldr	r3, [pc, #84]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407c:	f7fd fdd8 	bl	8001c30 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004084:	f7fd fdd4 	bl	8001c30 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e173      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <HAL_RCC_OscConfig+0x274>)
 8004098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x234>
 80040a2:	e01b      	b.n	80040dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a4:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_RCC_OscConfig+0x27c>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040aa:	f7fd fdc1 	bl	8001c30 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b0:	e00e      	b.n	80040d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b2:	f7fd fdbd 	bl	8001c30 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d907      	bls.n	80040d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e15c      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
 80040c4:	40023800 	.word	0x40023800
 80040c8:	42470000 	.word	0x42470000
 80040cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d0:	4b8a      	ldr	r3, [pc, #552]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 80040d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1ea      	bne.n	80040b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8097 	beq.w	8004218 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ea:	2300      	movs	r3, #0
 80040ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ee:	4b83      	ldr	r3, [pc, #524]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10f      	bne.n	800411a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	4b7f      	ldr	r3, [pc, #508]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	4a7e      	ldr	r2, [pc, #504]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 8004104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004108:	6413      	str	r3, [r2, #64]	; 0x40
 800410a:	4b7c      	ldr	r3, [pc, #496]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004116:	2301      	movs	r3, #1
 8004118:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411a:	4b79      	ldr	r3, [pc, #484]	; (8004300 <HAL_RCC_OscConfig+0x4b0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004122:	2b00      	cmp	r3, #0
 8004124:	d118      	bne.n	8004158 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004126:	4b76      	ldr	r3, [pc, #472]	; (8004300 <HAL_RCC_OscConfig+0x4b0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a75      	ldr	r2, [pc, #468]	; (8004300 <HAL_RCC_OscConfig+0x4b0>)
 800412c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004132:	f7fd fd7d 	bl	8001c30 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413a:	f7fd fd79 	bl	8001c30 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e118      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414c:	4b6c      	ldr	r3, [pc, #432]	; (8004300 <HAL_RCC_OscConfig+0x4b0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d106      	bne.n	800416e <HAL_RCC_OscConfig+0x31e>
 8004160:	4b66      	ldr	r3, [pc, #408]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004164:	4a65      	ldr	r2, [pc, #404]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	6713      	str	r3, [r2, #112]	; 0x70
 800416c:	e01c      	b.n	80041a8 <HAL_RCC_OscConfig+0x358>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b05      	cmp	r3, #5
 8004174:	d10c      	bne.n	8004190 <HAL_RCC_OscConfig+0x340>
 8004176:	4b61      	ldr	r3, [pc, #388]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417a:	4a60      	ldr	r2, [pc, #384]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 800417c:	f043 0304 	orr.w	r3, r3, #4
 8004180:	6713      	str	r3, [r2, #112]	; 0x70
 8004182:	4b5e      	ldr	r3, [pc, #376]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	4a5d      	ldr	r2, [pc, #372]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	6713      	str	r3, [r2, #112]	; 0x70
 800418e:	e00b      	b.n	80041a8 <HAL_RCC_OscConfig+0x358>
 8004190:	4b5a      	ldr	r3, [pc, #360]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 8004192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004194:	4a59      	ldr	r2, [pc, #356]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 8004196:	f023 0301 	bic.w	r3, r3, #1
 800419a:	6713      	str	r3, [r2, #112]	; 0x70
 800419c:	4b57      	ldr	r3, [pc, #348]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 800419e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a0:	4a56      	ldr	r2, [pc, #344]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 80041a2:	f023 0304 	bic.w	r3, r3, #4
 80041a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d015      	beq.n	80041dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b0:	f7fd fd3e 	bl	8001c30 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b8:	f7fd fd3a 	bl	8001c30 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e0d7      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ce:	4b4b      	ldr	r3, [pc, #300]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0ee      	beq.n	80041b8 <HAL_RCC_OscConfig+0x368>
 80041da:	e014      	b.n	8004206 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7fd fd28 	bl	8001c30 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e2:	e00a      	b.n	80041fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e4:	f7fd fd24 	bl	8001c30 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e0c1      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fa:	4b40      	ldr	r3, [pc, #256]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1ee      	bne.n	80041e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004206:	7dfb      	ldrb	r3, [r7, #23]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d105      	bne.n	8004218 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800420c:	4b3b      	ldr	r3, [pc, #236]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	4a3a      	ldr	r2, [pc, #232]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 8004212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004216:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80ad 	beq.w	800437c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004222:	4b36      	ldr	r3, [pc, #216]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b08      	cmp	r3, #8
 800422c:	d060      	beq.n	80042f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d145      	bne.n	80042c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004236:	4b33      	ldr	r3, [pc, #204]	; (8004304 <HAL_RCC_OscConfig+0x4b4>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fd fcf8 	bl	8001c30 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004244:	f7fd fcf4 	bl	8001c30 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e093      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004256:	4b29      	ldr	r3, [pc, #164]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	019b      	lsls	r3, r3, #6
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	3b01      	subs	r3, #1
 800427c:	041b      	lsls	r3, r3, #16
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	061b      	lsls	r3, r3, #24
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	071b      	lsls	r3, r3, #28
 800428e:	491b      	ldr	r1, [pc, #108]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004294:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <HAL_RCC_OscConfig+0x4b4>)
 8004296:	2201      	movs	r2, #1
 8004298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429a:	f7fd fcc9 	bl	8001c30 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a2:	f7fd fcc5 	bl	8001c30 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e064      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b4:	4b11      	ldr	r3, [pc, #68]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x452>
 80042c0:	e05c      	b.n	800437c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <HAL_RCC_OscConfig+0x4b4>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fd fcb2 	bl	8001c30 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d0:	f7fd fcae 	bl	8001c30 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e04d      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e2:	4b06      	ldr	r3, [pc, #24]	; (80042fc <HAL_RCC_OscConfig+0x4ac>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0x480>
 80042ee:	e045      	b.n	800437c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d107      	bne.n	8004308 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e040      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
 80042fc:	40023800 	.word	0x40023800
 8004300:	40007000 	.word	0x40007000
 8004304:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004308:	4b1f      	ldr	r3, [pc, #124]	; (8004388 <HAL_RCC_OscConfig+0x538>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d030      	beq.n	8004378 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004320:	429a      	cmp	r2, r3
 8004322:	d129      	bne.n	8004378 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d122      	bne.n	8004378 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004338:	4013      	ands	r3, r2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800433e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004340:	4293      	cmp	r3, r2
 8004342:	d119      	bne.n	8004378 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	3b01      	subs	r3, #1
 8004352:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d10f      	bne.n	8004378 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d107      	bne.n	8004378 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800

0800438c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e041      	b.n	8004422 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d106      	bne.n	80043b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fd fad6 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f000 fafe 	bl	80049cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	d001      	beq.n	8004444 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e046      	b.n	80044d2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a23      	ldr	r2, [pc, #140]	; (80044e0 <HAL_TIM_Base_Start+0xb4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d022      	beq.n	800449c <HAL_TIM_Base_Start+0x70>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445e:	d01d      	beq.n	800449c <HAL_TIM_Base_Start+0x70>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1f      	ldr	r2, [pc, #124]	; (80044e4 <HAL_TIM_Base_Start+0xb8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d018      	beq.n	800449c <HAL_TIM_Base_Start+0x70>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1e      	ldr	r2, [pc, #120]	; (80044e8 <HAL_TIM_Base_Start+0xbc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d013      	beq.n	800449c <HAL_TIM_Base_Start+0x70>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <HAL_TIM_Base_Start+0xc0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00e      	beq.n	800449c <HAL_TIM_Base_Start+0x70>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <HAL_TIM_Base_Start+0xc4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d009      	beq.n	800449c <HAL_TIM_Base_Start+0x70>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <HAL_TIM_Base_Start+0xc8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_TIM_Base_Start+0x70>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <HAL_TIM_Base_Start+0xcc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d111      	bne.n	80044c0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b06      	cmp	r3, #6
 80044ac:	d010      	beq.n	80044d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	e007      	b.n	80044d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40010000 	.word	0x40010000
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40000800 	.word	0x40000800
 80044ec:	40000c00 	.word	0x40000c00
 80044f0:	40010400 	.word	0x40010400
 80044f4:	40014000 	.word	0x40014000
 80044f8:	40001800 	.word	0x40001800

080044fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d001      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e04e      	b.n	80045b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a23      	ldr	r2, [pc, #140]	; (80045c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d022      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453e:	d01d      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a1f      	ldr	r2, [pc, #124]	; (80045c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d018      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a1e      	ldr	r2, [pc, #120]	; (80045c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d013      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1c      	ldr	r2, [pc, #112]	; (80045cc <HAL_TIM_Base_Start_IT+0xd0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00e      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1b      	ldr	r2, [pc, #108]	; (80045d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d009      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a19      	ldr	r2, [pc, #100]	; (80045d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d004      	beq.n	800457c <HAL_TIM_Base_Start_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d111      	bne.n	80045a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b06      	cmp	r3, #6
 800458c:	d010      	beq.n	80045b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0201 	orr.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459e:	e007      	b.n	80045b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40010000 	.word	0x40010000
 80045c4:	40000400 	.word	0x40000400
 80045c8:	40000800 	.word	0x40000800
 80045cc:	40000c00 	.word	0x40000c00
 80045d0:	40010400 	.word	0x40010400
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40001800 	.word	0x40001800

080045dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0202 	mvn.w	r2, #2
 8004608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f9b5 	bl	800498e <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f9a7 	bl	800497a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f9b8 	bl	80049a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b04      	cmp	r3, #4
 8004644:	d122      	bne.n	800468c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b04      	cmp	r3, #4
 8004652:	d11b      	bne.n	800468c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0204 	mvn.w	r2, #4
 800465c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2202      	movs	r2, #2
 8004662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f98b 	bl	800498e <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f97d 	bl	800497a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f98e 	bl	80049a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b08      	cmp	r3, #8
 8004698:	d122      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d11b      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0208 	mvn.w	r2, #8
 80046b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2204      	movs	r2, #4
 80046b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f961 	bl	800498e <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f953 	bl	800497a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f964 	bl	80049a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2b10      	cmp	r3, #16
 80046ec:	d122      	bne.n	8004734 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d11b      	bne.n	8004734 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0210 	mvn.w	r2, #16
 8004704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2208      	movs	r2, #8
 800470a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f937 	bl	800498e <HAL_TIM_IC_CaptureCallback>
 8004720:	e005      	b.n	800472e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f929 	bl	800497a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f93a 	bl	80049a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b01      	cmp	r3, #1
 8004740:	d10e      	bne.n	8004760 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b01      	cmp	r3, #1
 800474e:	d107      	bne.n	8004760 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0201 	mvn.w	r2, #1
 8004758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fc fd6c 	bl	8001238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b80      	cmp	r3, #128	; 0x80
 800476c:	d10e      	bne.n	800478c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004778:	2b80      	cmp	r3, #128	; 0x80
 800477a:	d107      	bne.n	800478c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fae0 	bl	8004d4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004796:	2b40      	cmp	r3, #64	; 0x40
 8004798:	d10e      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	d107      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f8ff 	bl	80049b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d10e      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0320 	and.w	r3, r3, #32
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d107      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0220 	mvn.w	r2, #32
 80047dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 faaa 	bl	8004d38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047e4:	bf00      	nop
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_TIM_ConfigClockSource+0x1c>
 8004804:	2302      	movs	r3, #2
 8004806:	e0b4      	b.n	8004972 <HAL_TIM_ConfigClockSource+0x186>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800482e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004840:	d03e      	beq.n	80048c0 <HAL_TIM_ConfigClockSource+0xd4>
 8004842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004846:	f200 8087 	bhi.w	8004958 <HAL_TIM_ConfigClockSource+0x16c>
 800484a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484e:	f000 8086 	beq.w	800495e <HAL_TIM_ConfigClockSource+0x172>
 8004852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004856:	d87f      	bhi.n	8004958 <HAL_TIM_ConfigClockSource+0x16c>
 8004858:	2b70      	cmp	r3, #112	; 0x70
 800485a:	d01a      	beq.n	8004892 <HAL_TIM_ConfigClockSource+0xa6>
 800485c:	2b70      	cmp	r3, #112	; 0x70
 800485e:	d87b      	bhi.n	8004958 <HAL_TIM_ConfigClockSource+0x16c>
 8004860:	2b60      	cmp	r3, #96	; 0x60
 8004862:	d050      	beq.n	8004906 <HAL_TIM_ConfigClockSource+0x11a>
 8004864:	2b60      	cmp	r3, #96	; 0x60
 8004866:	d877      	bhi.n	8004958 <HAL_TIM_ConfigClockSource+0x16c>
 8004868:	2b50      	cmp	r3, #80	; 0x50
 800486a:	d03c      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0xfa>
 800486c:	2b50      	cmp	r3, #80	; 0x50
 800486e:	d873      	bhi.n	8004958 <HAL_TIM_ConfigClockSource+0x16c>
 8004870:	2b40      	cmp	r3, #64	; 0x40
 8004872:	d058      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0x13a>
 8004874:	2b40      	cmp	r3, #64	; 0x40
 8004876:	d86f      	bhi.n	8004958 <HAL_TIM_ConfigClockSource+0x16c>
 8004878:	2b30      	cmp	r3, #48	; 0x30
 800487a:	d064      	beq.n	8004946 <HAL_TIM_ConfigClockSource+0x15a>
 800487c:	2b30      	cmp	r3, #48	; 0x30
 800487e:	d86b      	bhi.n	8004958 <HAL_TIM_ConfigClockSource+0x16c>
 8004880:	2b20      	cmp	r3, #32
 8004882:	d060      	beq.n	8004946 <HAL_TIM_ConfigClockSource+0x15a>
 8004884:	2b20      	cmp	r3, #32
 8004886:	d867      	bhi.n	8004958 <HAL_TIM_ConfigClockSource+0x16c>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d05c      	beq.n	8004946 <HAL_TIM_ConfigClockSource+0x15a>
 800488c:	2b10      	cmp	r3, #16
 800488e:	d05a      	beq.n	8004946 <HAL_TIM_ConfigClockSource+0x15a>
 8004890:	e062      	b.n	8004958 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6899      	ldr	r1, [r3, #8]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f000 f9ad 	bl	8004c00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	609a      	str	r2, [r3, #8]
      break;
 80048be:	e04f      	b.n	8004960 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6818      	ldr	r0, [r3, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	6899      	ldr	r1, [r3, #8]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f000 f996 	bl	8004c00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048e2:	609a      	str	r2, [r3, #8]
      break;
 80048e4:	e03c      	b.n	8004960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	6859      	ldr	r1, [r3, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	461a      	mov	r2, r3
 80048f4:	f000 f90a 	bl	8004b0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2150      	movs	r1, #80	; 0x50
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 f963 	bl	8004bca <TIM_ITRx_SetConfig>
      break;
 8004904:	e02c      	b.n	8004960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	6859      	ldr	r1, [r3, #4]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	461a      	mov	r2, r3
 8004914:	f000 f929 	bl	8004b6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2160      	movs	r1, #96	; 0x60
 800491e:	4618      	mov	r0, r3
 8004920:	f000 f953 	bl	8004bca <TIM_ITRx_SetConfig>
      break;
 8004924:	e01c      	b.n	8004960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	6859      	ldr	r1, [r3, #4]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	461a      	mov	r2, r3
 8004934:	f000 f8ea 	bl	8004b0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2140      	movs	r1, #64	; 0x40
 800493e:	4618      	mov	r0, r3
 8004940:	f000 f943 	bl	8004bca <TIM_ITRx_SetConfig>
      break;
 8004944:	e00c      	b.n	8004960 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4619      	mov	r1, r3
 8004950:	4610      	mov	r0, r2
 8004952:	f000 f93a 	bl	8004bca <TIM_ITRx_SetConfig>
      break;
 8004956:	e003      	b.n	8004960 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
      break;
 800495c:	e000      	b.n	8004960 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800495e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004970:	7bfb      	ldrb	r3, [r7, #15]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a40      	ldr	r2, [pc, #256]	; (8004ae0 <TIM_Base_SetConfig+0x114>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d013      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ea:	d00f      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a3d      	ldr	r2, [pc, #244]	; (8004ae4 <TIM_Base_SetConfig+0x118>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00b      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a3c      	ldr	r2, [pc, #240]	; (8004ae8 <TIM_Base_SetConfig+0x11c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d007      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a3b      	ldr	r2, [pc, #236]	; (8004aec <TIM_Base_SetConfig+0x120>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d003      	beq.n	8004a0c <TIM_Base_SetConfig+0x40>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a3a      	ldr	r2, [pc, #232]	; (8004af0 <TIM_Base_SetConfig+0x124>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d108      	bne.n	8004a1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a2f      	ldr	r2, [pc, #188]	; (8004ae0 <TIM_Base_SetConfig+0x114>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d02b      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2c:	d027      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a2c      	ldr	r2, [pc, #176]	; (8004ae4 <TIM_Base_SetConfig+0x118>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d023      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a2b      	ldr	r2, [pc, #172]	; (8004ae8 <TIM_Base_SetConfig+0x11c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01f      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a2a      	ldr	r2, [pc, #168]	; (8004aec <TIM_Base_SetConfig+0x120>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d01b      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a29      	ldr	r2, [pc, #164]	; (8004af0 <TIM_Base_SetConfig+0x124>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d017      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a28      	ldr	r2, [pc, #160]	; (8004af4 <TIM_Base_SetConfig+0x128>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d013      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a27      	ldr	r2, [pc, #156]	; (8004af8 <TIM_Base_SetConfig+0x12c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00f      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a26      	ldr	r2, [pc, #152]	; (8004afc <TIM_Base_SetConfig+0x130>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00b      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a25      	ldr	r2, [pc, #148]	; (8004b00 <TIM_Base_SetConfig+0x134>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d007      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a24      	ldr	r2, [pc, #144]	; (8004b04 <TIM_Base_SetConfig+0x138>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d003      	beq.n	8004a7e <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a23      	ldr	r2, [pc, #140]	; (8004b08 <TIM_Base_SetConfig+0x13c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d108      	bne.n	8004a90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a0a      	ldr	r2, [pc, #40]	; (8004ae0 <TIM_Base_SetConfig+0x114>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_Base_SetConfig+0xf8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a0c      	ldr	r2, [pc, #48]	; (8004af0 <TIM_Base_SetConfig+0x124>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d103      	bne.n	8004acc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	615a      	str	r2, [r3, #20]
}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40000800 	.word	0x40000800
 8004aec:	40000c00 	.word	0x40000c00
 8004af0:	40010400 	.word	0x40010400
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800
 8004b00:	40001800 	.word	0x40001800
 8004b04:	40001c00 	.word	0x40001c00
 8004b08:	40002000 	.word	0x40002000

08004b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	f023 0201 	bic.w	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f023 030a 	bic.w	r3, r3, #10
 8004b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	621a      	str	r2, [r3, #32]
}
 8004b5e:	bf00      	nop
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b087      	sub	sp, #28
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f023 0210 	bic.w	r2, r3, #16
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	031b      	lsls	r3, r3, #12
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ba6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f043 0307 	orr.w	r3, r3, #7
 8004bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	609a      	str	r2, [r3, #8]
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	021a      	lsls	r2, r3, #8
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	609a      	str	r2, [r3, #8]
}
 8004c34:	bf00      	nop
 8004c36:	371c      	adds	r7, #28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e05a      	b.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a21      	ldr	r2, [pc, #132]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d022      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca4:	d01d      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1d      	ldr	r2, [pc, #116]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d018      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1b      	ldr	r2, [pc, #108]	; (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d013      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1a      	ldr	r2, [pc, #104]	; (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00e      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d009      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d004      	beq.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a15      	ldr	r2, [pc, #84]	; (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d10c      	bne.n	8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800
 8004d28:	40000c00 	.word	0x40000c00
 8004d2c:	40010400 	.word	0x40010400
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40001800 	.word	0x40001800

08004d38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e03f      	b.n	8004df2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d106      	bne.n	8004d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fc fe2a 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2224      	movs	r2, #36	; 0x24
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f829 	bl	8004dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e00:	b0c0      	sub	sp, #256	; 0x100
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e18:	68d9      	ldr	r1, [r3, #12]
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	ea40 0301 	orr.w	r3, r0, r1
 8004e24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e54:	f021 010c 	bic.w	r1, r1, #12
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e62:	430b      	orrs	r3, r1
 8004e64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e76:	6999      	ldr	r1, [r3, #24]
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	ea40 0301 	orr.w	r3, r0, r1
 8004e82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4b8f      	ldr	r3, [pc, #572]	; (80050c8 <UART_SetConfig+0x2cc>)
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d005      	beq.n	8004e9c <UART_SetConfig+0xa0>
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4b8d      	ldr	r3, [pc, #564]	; (80050cc <UART_SetConfig+0x2d0>)
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d104      	bne.n	8004ea6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e9c:	f7fe fd94 	bl	80039c8 <HAL_RCC_GetPCLK2Freq>
 8004ea0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ea4:	e003      	b.n	8004eae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ea6:	f7fe fd7b 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8004eaa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eb8:	f040 810c 	bne.w	80050d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ec6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004eca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ece:	4622      	mov	r2, r4
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	1891      	adds	r1, r2, r2
 8004ed4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ed6:	415b      	adcs	r3, r3
 8004ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ede:	4621      	mov	r1, r4
 8004ee0:	eb12 0801 	adds.w	r8, r2, r1
 8004ee4:	4629      	mov	r1, r5
 8004ee6:	eb43 0901 	adc.w	r9, r3, r1
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004efe:	4690      	mov	r8, r2
 8004f00:	4699      	mov	r9, r3
 8004f02:	4623      	mov	r3, r4
 8004f04:	eb18 0303 	adds.w	r3, r8, r3
 8004f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f0c:	462b      	mov	r3, r5
 8004f0e:	eb49 0303 	adc.w	r3, r9, r3
 8004f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	18db      	adds	r3, r3, r3
 8004f2e:	653b      	str	r3, [r7, #80]	; 0x50
 8004f30:	4613      	mov	r3, r2
 8004f32:	eb42 0303 	adc.w	r3, r2, r3
 8004f36:	657b      	str	r3, [r7, #84]	; 0x54
 8004f38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f40:	f7fb fe08 	bl	8000b54 <__aeabi_uldivmod>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4b61      	ldr	r3, [pc, #388]	; (80050d0 <UART_SetConfig+0x2d4>)
 8004f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	011c      	lsls	r4, r3, #4
 8004f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f64:	4642      	mov	r2, r8
 8004f66:	464b      	mov	r3, r9
 8004f68:	1891      	adds	r1, r2, r2
 8004f6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f6c:	415b      	adcs	r3, r3
 8004f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f74:	4641      	mov	r1, r8
 8004f76:	eb12 0a01 	adds.w	sl, r2, r1
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	eb43 0b01 	adc.w	fp, r3, r1
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f94:	4692      	mov	sl, r2
 8004f96:	469b      	mov	fp, r3
 8004f98:	4643      	mov	r3, r8
 8004f9a:	eb1a 0303 	adds.w	r3, sl, r3
 8004f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	eb4b 0303 	adc.w	r3, fp, r3
 8004fa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	18db      	adds	r3, r3, r3
 8004fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	eb42 0303 	adc.w	r3, r2, r3
 8004fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8004fce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004fd6:	f7fb fdbd 	bl	8000b54 <__aeabi_uldivmod>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4611      	mov	r1, r2
 8004fe0:	4b3b      	ldr	r3, [pc, #236]	; (80050d0 <UART_SetConfig+0x2d4>)
 8004fe2:	fba3 2301 	umull	r2, r3, r3, r1
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	2264      	movs	r2, #100	; 0x64
 8004fea:	fb02 f303 	mul.w	r3, r2, r3
 8004fee:	1acb      	subs	r3, r1, r3
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ff6:	4b36      	ldr	r3, [pc, #216]	; (80050d0 <UART_SetConfig+0x2d4>)
 8004ff8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005004:	441c      	add	r4, r3
 8005006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800500a:	2200      	movs	r2, #0
 800500c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005010:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005014:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005018:	4642      	mov	r2, r8
 800501a:	464b      	mov	r3, r9
 800501c:	1891      	adds	r1, r2, r2
 800501e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005020:	415b      	adcs	r3, r3
 8005022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005024:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005028:	4641      	mov	r1, r8
 800502a:	1851      	adds	r1, r2, r1
 800502c:	6339      	str	r1, [r7, #48]	; 0x30
 800502e:	4649      	mov	r1, r9
 8005030:	414b      	adcs	r3, r1
 8005032:	637b      	str	r3, [r7, #52]	; 0x34
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005040:	4659      	mov	r1, fp
 8005042:	00cb      	lsls	r3, r1, #3
 8005044:	4651      	mov	r1, sl
 8005046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800504a:	4651      	mov	r1, sl
 800504c:	00ca      	lsls	r2, r1, #3
 800504e:	4610      	mov	r0, r2
 8005050:	4619      	mov	r1, r3
 8005052:	4603      	mov	r3, r0
 8005054:	4642      	mov	r2, r8
 8005056:	189b      	adds	r3, r3, r2
 8005058:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800505c:	464b      	mov	r3, r9
 800505e:	460a      	mov	r2, r1
 8005060:	eb42 0303 	adc.w	r3, r2, r3
 8005064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005074:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005078:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800507c:	460b      	mov	r3, r1
 800507e:	18db      	adds	r3, r3, r3
 8005080:	62bb      	str	r3, [r7, #40]	; 0x28
 8005082:	4613      	mov	r3, r2
 8005084:	eb42 0303 	adc.w	r3, r2, r3
 8005088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800508a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800508e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005092:	f7fb fd5f 	bl	8000b54 <__aeabi_uldivmod>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <UART_SetConfig+0x2d4>)
 800509c:	fba3 1302 	umull	r1, r3, r3, r2
 80050a0:	095b      	lsrs	r3, r3, #5
 80050a2:	2164      	movs	r1, #100	; 0x64
 80050a4:	fb01 f303 	mul.w	r3, r1, r3
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	3332      	adds	r3, #50	; 0x32
 80050ae:	4a08      	ldr	r2, [pc, #32]	; (80050d0 <UART_SetConfig+0x2d4>)
 80050b0:	fba2 2303 	umull	r2, r3, r2, r3
 80050b4:	095b      	lsrs	r3, r3, #5
 80050b6:	f003 0207 	and.w	r2, r3, #7
 80050ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4422      	add	r2, r4
 80050c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050c4:	e105      	b.n	80052d2 <UART_SetConfig+0x4d6>
 80050c6:	bf00      	nop
 80050c8:	40011000 	.word	0x40011000
 80050cc:	40011400 	.word	0x40011400
 80050d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050e6:	4642      	mov	r2, r8
 80050e8:	464b      	mov	r3, r9
 80050ea:	1891      	adds	r1, r2, r2
 80050ec:	6239      	str	r1, [r7, #32]
 80050ee:	415b      	adcs	r3, r3
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
 80050f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050f6:	4641      	mov	r1, r8
 80050f8:	1854      	adds	r4, r2, r1
 80050fa:	4649      	mov	r1, r9
 80050fc:	eb43 0501 	adc.w	r5, r3, r1
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	00eb      	lsls	r3, r5, #3
 800510a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800510e:	00e2      	lsls	r2, r4, #3
 8005110:	4614      	mov	r4, r2
 8005112:	461d      	mov	r5, r3
 8005114:	4643      	mov	r3, r8
 8005116:	18e3      	adds	r3, r4, r3
 8005118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800511c:	464b      	mov	r3, r9
 800511e:	eb45 0303 	adc.w	r3, r5, r3
 8005122:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005132:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005142:	4629      	mov	r1, r5
 8005144:	008b      	lsls	r3, r1, #2
 8005146:	4621      	mov	r1, r4
 8005148:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800514c:	4621      	mov	r1, r4
 800514e:	008a      	lsls	r2, r1, #2
 8005150:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005154:	f7fb fcfe 	bl	8000b54 <__aeabi_uldivmod>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4b60      	ldr	r3, [pc, #384]	; (80052e0 <UART_SetConfig+0x4e4>)
 800515e:	fba3 2302 	umull	r2, r3, r3, r2
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	011c      	lsls	r4, r3, #4
 8005166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800516a:	2200      	movs	r2, #0
 800516c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005170:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005174:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005178:	4642      	mov	r2, r8
 800517a:	464b      	mov	r3, r9
 800517c:	1891      	adds	r1, r2, r2
 800517e:	61b9      	str	r1, [r7, #24]
 8005180:	415b      	adcs	r3, r3
 8005182:	61fb      	str	r3, [r7, #28]
 8005184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005188:	4641      	mov	r1, r8
 800518a:	1851      	adds	r1, r2, r1
 800518c:	6139      	str	r1, [r7, #16]
 800518e:	4649      	mov	r1, r9
 8005190:	414b      	adcs	r3, r1
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051a0:	4659      	mov	r1, fp
 80051a2:	00cb      	lsls	r3, r1, #3
 80051a4:	4651      	mov	r1, sl
 80051a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051aa:	4651      	mov	r1, sl
 80051ac:	00ca      	lsls	r2, r1, #3
 80051ae:	4610      	mov	r0, r2
 80051b0:	4619      	mov	r1, r3
 80051b2:	4603      	mov	r3, r0
 80051b4:	4642      	mov	r2, r8
 80051b6:	189b      	adds	r3, r3, r2
 80051b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051bc:	464b      	mov	r3, r9
 80051be:	460a      	mov	r2, r1
 80051c0:	eb42 0303 	adc.w	r3, r2, r3
 80051c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80051d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051e0:	4649      	mov	r1, r9
 80051e2:	008b      	lsls	r3, r1, #2
 80051e4:	4641      	mov	r1, r8
 80051e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ea:	4641      	mov	r1, r8
 80051ec:	008a      	lsls	r2, r1, #2
 80051ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051f2:	f7fb fcaf 	bl	8000b54 <__aeabi_uldivmod>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4b39      	ldr	r3, [pc, #228]	; (80052e0 <UART_SetConfig+0x4e4>)
 80051fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	2164      	movs	r1, #100	; 0x64
 8005204:	fb01 f303 	mul.w	r3, r1, r3
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	3332      	adds	r3, #50	; 0x32
 800520e:	4a34      	ldr	r2, [pc, #208]	; (80052e0 <UART_SetConfig+0x4e4>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800521a:	441c      	add	r4, r3
 800521c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005220:	2200      	movs	r2, #0
 8005222:	673b      	str	r3, [r7, #112]	; 0x70
 8005224:	677a      	str	r2, [r7, #116]	; 0x74
 8005226:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800522a:	4642      	mov	r2, r8
 800522c:	464b      	mov	r3, r9
 800522e:	1891      	adds	r1, r2, r2
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	415b      	adcs	r3, r3
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800523a:	4641      	mov	r1, r8
 800523c:	1851      	adds	r1, r2, r1
 800523e:	6039      	str	r1, [r7, #0]
 8005240:	4649      	mov	r1, r9
 8005242:	414b      	adcs	r3, r1
 8005244:	607b      	str	r3, [r7, #4]
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005252:	4659      	mov	r1, fp
 8005254:	00cb      	lsls	r3, r1, #3
 8005256:	4651      	mov	r1, sl
 8005258:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800525c:	4651      	mov	r1, sl
 800525e:	00ca      	lsls	r2, r1, #3
 8005260:	4610      	mov	r0, r2
 8005262:	4619      	mov	r1, r3
 8005264:	4603      	mov	r3, r0
 8005266:	4642      	mov	r2, r8
 8005268:	189b      	adds	r3, r3, r2
 800526a:	66bb      	str	r3, [r7, #104]	; 0x68
 800526c:	464b      	mov	r3, r9
 800526e:	460a      	mov	r2, r1
 8005270:	eb42 0303 	adc.w	r3, r2, r3
 8005274:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	663b      	str	r3, [r7, #96]	; 0x60
 8005280:	667a      	str	r2, [r7, #100]	; 0x64
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	f04f 0300 	mov.w	r3, #0
 800528a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800528e:	4649      	mov	r1, r9
 8005290:	008b      	lsls	r3, r1, #2
 8005292:	4641      	mov	r1, r8
 8005294:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005298:	4641      	mov	r1, r8
 800529a:	008a      	lsls	r2, r1, #2
 800529c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052a0:	f7fb fc58 	bl	8000b54 <__aeabi_uldivmod>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <UART_SetConfig+0x4e4>)
 80052aa:	fba3 1302 	umull	r1, r3, r3, r2
 80052ae:	095b      	lsrs	r3, r3, #5
 80052b0:	2164      	movs	r1, #100	; 0x64
 80052b2:	fb01 f303 	mul.w	r3, r1, r3
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	3332      	adds	r3, #50	; 0x32
 80052bc:	4a08      	ldr	r2, [pc, #32]	; (80052e0 <UART_SetConfig+0x4e4>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	095b      	lsrs	r3, r3, #5
 80052c4:	f003 020f 	and.w	r2, r3, #15
 80052c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4422      	add	r2, r4
 80052d0:	609a      	str	r2, [r3, #8]
}
 80052d2:	bf00      	nop
 80052d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052d8:	46bd      	mov	sp, r7
 80052da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052de:	bf00      	nop
 80052e0:	51eb851f 	.word	0x51eb851f

080052e4 <__libc_init_array>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	4d0d      	ldr	r5, [pc, #52]	; (800531c <__libc_init_array+0x38>)
 80052e8:	4c0d      	ldr	r4, [pc, #52]	; (8005320 <__libc_init_array+0x3c>)
 80052ea:	1b64      	subs	r4, r4, r5
 80052ec:	10a4      	asrs	r4, r4, #2
 80052ee:	2600      	movs	r6, #0
 80052f0:	42a6      	cmp	r6, r4
 80052f2:	d109      	bne.n	8005308 <__libc_init_array+0x24>
 80052f4:	4d0b      	ldr	r5, [pc, #44]	; (8005324 <__libc_init_array+0x40>)
 80052f6:	4c0c      	ldr	r4, [pc, #48]	; (8005328 <__libc_init_array+0x44>)
 80052f8:	f000 fa98 	bl	800582c <_init>
 80052fc:	1b64      	subs	r4, r4, r5
 80052fe:	10a4      	asrs	r4, r4, #2
 8005300:	2600      	movs	r6, #0
 8005302:	42a6      	cmp	r6, r4
 8005304:	d105      	bne.n	8005312 <__libc_init_array+0x2e>
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	f855 3b04 	ldr.w	r3, [r5], #4
 800530c:	4798      	blx	r3
 800530e:	3601      	adds	r6, #1
 8005310:	e7ee      	b.n	80052f0 <__libc_init_array+0xc>
 8005312:	f855 3b04 	ldr.w	r3, [r5], #4
 8005316:	4798      	blx	r3
 8005318:	3601      	adds	r6, #1
 800531a:	e7f2      	b.n	8005302 <__libc_init_array+0x1e>
 800531c:	080058e0 	.word	0x080058e0
 8005320:	080058e0 	.word	0x080058e0
 8005324:	080058e0 	.word	0x080058e0
 8005328:	080058e4 	.word	0x080058e4

0800532c <memset>:
 800532c:	4402      	add	r2, r0
 800532e:	4603      	mov	r3, r0
 8005330:	4293      	cmp	r3, r2
 8005332:	d100      	bne.n	8005336 <memset+0xa>
 8005334:	4770      	bx	lr
 8005336:	f803 1b01 	strb.w	r1, [r3], #1
 800533a:	e7f9      	b.n	8005330 <memset+0x4>

0800533c <atan2>:
 800533c:	f000 b800 	b.w	8005340 <__ieee754_atan2>

08005340 <__ieee754_atan2>:
 8005340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005344:	ec57 6b11 	vmov	r6, r7, d1
 8005348:	4273      	negs	r3, r6
 800534a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80054d0 <__ieee754_atan2+0x190>
 800534e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8005352:	4333      	orrs	r3, r6
 8005354:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005358:	4573      	cmp	r3, lr
 800535a:	ec51 0b10 	vmov	r0, r1, d0
 800535e:	ee11 8a10 	vmov	r8, s2
 8005362:	d80a      	bhi.n	800537a <__ieee754_atan2+0x3a>
 8005364:	4244      	negs	r4, r0
 8005366:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800536a:	4304      	orrs	r4, r0
 800536c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005370:	4574      	cmp	r4, lr
 8005372:	ee10 9a10 	vmov	r9, s0
 8005376:	468c      	mov	ip, r1
 8005378:	d907      	bls.n	800538a <__ieee754_atan2+0x4a>
 800537a:	4632      	mov	r2, r6
 800537c:	463b      	mov	r3, r7
 800537e:	f7fa ff49 	bl	8000214 <__adddf3>
 8005382:	ec41 0b10 	vmov	d0, r0, r1
 8005386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800538a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800538e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005392:	4334      	orrs	r4, r6
 8005394:	d103      	bne.n	800539e <__ieee754_atan2+0x5e>
 8005396:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800539a:	f000 b89d 	b.w	80054d8 <atan>
 800539e:	17bc      	asrs	r4, r7, #30
 80053a0:	f004 0402 	and.w	r4, r4, #2
 80053a4:	ea53 0909 	orrs.w	r9, r3, r9
 80053a8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80053ac:	d107      	bne.n	80053be <__ieee754_atan2+0x7e>
 80053ae:	2c02      	cmp	r4, #2
 80053b0:	d060      	beq.n	8005474 <__ieee754_atan2+0x134>
 80053b2:	2c03      	cmp	r4, #3
 80053b4:	d1e5      	bne.n	8005382 <__ieee754_atan2+0x42>
 80053b6:	a142      	add	r1, pc, #264	; (adr r1, 80054c0 <__ieee754_atan2+0x180>)
 80053b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053bc:	e7e1      	b.n	8005382 <__ieee754_atan2+0x42>
 80053be:	ea52 0808 	orrs.w	r8, r2, r8
 80053c2:	d106      	bne.n	80053d2 <__ieee754_atan2+0x92>
 80053c4:	f1bc 0f00 	cmp.w	ip, #0
 80053c8:	da5f      	bge.n	800548a <__ieee754_atan2+0x14a>
 80053ca:	a13f      	add	r1, pc, #252	; (adr r1, 80054c8 <__ieee754_atan2+0x188>)
 80053cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053d0:	e7d7      	b.n	8005382 <__ieee754_atan2+0x42>
 80053d2:	4572      	cmp	r2, lr
 80053d4:	d10f      	bne.n	80053f6 <__ieee754_atan2+0xb6>
 80053d6:	4293      	cmp	r3, r2
 80053d8:	f104 34ff 	add.w	r4, r4, #4294967295
 80053dc:	d107      	bne.n	80053ee <__ieee754_atan2+0xae>
 80053de:	2c02      	cmp	r4, #2
 80053e0:	d84c      	bhi.n	800547c <__ieee754_atan2+0x13c>
 80053e2:	4b35      	ldr	r3, [pc, #212]	; (80054b8 <__ieee754_atan2+0x178>)
 80053e4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80053e8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80053ec:	e7c9      	b.n	8005382 <__ieee754_atan2+0x42>
 80053ee:	2c02      	cmp	r4, #2
 80053f0:	d848      	bhi.n	8005484 <__ieee754_atan2+0x144>
 80053f2:	4b32      	ldr	r3, [pc, #200]	; (80054bc <__ieee754_atan2+0x17c>)
 80053f4:	e7f6      	b.n	80053e4 <__ieee754_atan2+0xa4>
 80053f6:	4573      	cmp	r3, lr
 80053f8:	d0e4      	beq.n	80053c4 <__ieee754_atan2+0x84>
 80053fa:	1a9b      	subs	r3, r3, r2
 80053fc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005400:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005404:	da1e      	bge.n	8005444 <__ieee754_atan2+0x104>
 8005406:	2f00      	cmp	r7, #0
 8005408:	da01      	bge.n	800540e <__ieee754_atan2+0xce>
 800540a:	323c      	adds	r2, #60	; 0x3c
 800540c:	db1e      	blt.n	800544c <__ieee754_atan2+0x10c>
 800540e:	4632      	mov	r2, r6
 8005410:	463b      	mov	r3, r7
 8005412:	f7fb f9df 	bl	80007d4 <__aeabi_ddiv>
 8005416:	ec41 0b10 	vmov	d0, r0, r1
 800541a:	f000 f9fd 	bl	8005818 <fabs>
 800541e:	f000 f85b 	bl	80054d8 <atan>
 8005422:	ec51 0b10 	vmov	r0, r1, d0
 8005426:	2c01      	cmp	r4, #1
 8005428:	d013      	beq.n	8005452 <__ieee754_atan2+0x112>
 800542a:	2c02      	cmp	r4, #2
 800542c:	d015      	beq.n	800545a <__ieee754_atan2+0x11a>
 800542e:	2c00      	cmp	r4, #0
 8005430:	d0a7      	beq.n	8005382 <__ieee754_atan2+0x42>
 8005432:	a319      	add	r3, pc, #100	; (adr r3, 8005498 <__ieee754_atan2+0x158>)
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	f7fa feea 	bl	8000210 <__aeabi_dsub>
 800543c:	a318      	add	r3, pc, #96	; (adr r3, 80054a0 <__ieee754_atan2+0x160>)
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	e014      	b.n	800546e <__ieee754_atan2+0x12e>
 8005444:	a118      	add	r1, pc, #96	; (adr r1, 80054a8 <__ieee754_atan2+0x168>)
 8005446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800544a:	e7ec      	b.n	8005426 <__ieee754_atan2+0xe6>
 800544c:	2000      	movs	r0, #0
 800544e:	2100      	movs	r1, #0
 8005450:	e7e9      	b.n	8005426 <__ieee754_atan2+0xe6>
 8005452:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005456:	4619      	mov	r1, r3
 8005458:	e793      	b.n	8005382 <__ieee754_atan2+0x42>
 800545a:	a30f      	add	r3, pc, #60	; (adr r3, 8005498 <__ieee754_atan2+0x158>)
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	f7fa fed6 	bl	8000210 <__aeabi_dsub>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	a10d      	add	r1, pc, #52	; (adr r1, 80054a0 <__ieee754_atan2+0x160>)
 800546a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800546e:	f7fa fecf 	bl	8000210 <__aeabi_dsub>
 8005472:	e786      	b.n	8005382 <__ieee754_atan2+0x42>
 8005474:	a10a      	add	r1, pc, #40	; (adr r1, 80054a0 <__ieee754_atan2+0x160>)
 8005476:	e9d1 0100 	ldrd	r0, r1, [r1]
 800547a:	e782      	b.n	8005382 <__ieee754_atan2+0x42>
 800547c:	a10c      	add	r1, pc, #48	; (adr r1, 80054b0 <__ieee754_atan2+0x170>)
 800547e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005482:	e77e      	b.n	8005382 <__ieee754_atan2+0x42>
 8005484:	2000      	movs	r0, #0
 8005486:	2100      	movs	r1, #0
 8005488:	e77b      	b.n	8005382 <__ieee754_atan2+0x42>
 800548a:	a107      	add	r1, pc, #28	; (adr r1, 80054a8 <__ieee754_atan2+0x168>)
 800548c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005490:	e777      	b.n	8005382 <__ieee754_atan2+0x42>
 8005492:	bf00      	nop
 8005494:	f3af 8000 	nop.w
 8005498:	33145c07 	.word	0x33145c07
 800549c:	3ca1a626 	.word	0x3ca1a626
 80054a0:	54442d18 	.word	0x54442d18
 80054a4:	400921fb 	.word	0x400921fb
 80054a8:	54442d18 	.word	0x54442d18
 80054ac:	3ff921fb 	.word	0x3ff921fb
 80054b0:	54442d18 	.word	0x54442d18
 80054b4:	3fe921fb 	.word	0x3fe921fb
 80054b8:	08005868 	.word	0x08005868
 80054bc:	08005880 	.word	0x08005880
 80054c0:	54442d18 	.word	0x54442d18
 80054c4:	c00921fb 	.word	0xc00921fb
 80054c8:	54442d18 	.word	0x54442d18
 80054cc:	bff921fb 	.word	0xbff921fb
 80054d0:	7ff00000 	.word	0x7ff00000
 80054d4:	00000000 	.word	0x00000000

080054d8 <atan>:
 80054d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	ec55 4b10 	vmov	r4, r5, d0
 80054e0:	4bc3      	ldr	r3, [pc, #780]	; (80057f0 <atan+0x318>)
 80054e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80054e6:	429e      	cmp	r6, r3
 80054e8:	46ab      	mov	fp, r5
 80054ea:	dd18      	ble.n	800551e <atan+0x46>
 80054ec:	4bc1      	ldr	r3, [pc, #772]	; (80057f4 <atan+0x31c>)
 80054ee:	429e      	cmp	r6, r3
 80054f0:	dc01      	bgt.n	80054f6 <atan+0x1e>
 80054f2:	d109      	bne.n	8005508 <atan+0x30>
 80054f4:	b144      	cbz	r4, 8005508 <atan+0x30>
 80054f6:	4622      	mov	r2, r4
 80054f8:	462b      	mov	r3, r5
 80054fa:	4620      	mov	r0, r4
 80054fc:	4629      	mov	r1, r5
 80054fe:	f7fa fe89 	bl	8000214 <__adddf3>
 8005502:	4604      	mov	r4, r0
 8005504:	460d      	mov	r5, r1
 8005506:	e006      	b.n	8005516 <atan+0x3e>
 8005508:	f1bb 0f00 	cmp.w	fp, #0
 800550c:	f300 8131 	bgt.w	8005772 <atan+0x29a>
 8005510:	a59b      	add	r5, pc, #620	; (adr r5, 8005780 <atan+0x2a8>)
 8005512:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005516:	ec45 4b10 	vmov	d0, r4, r5
 800551a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800551e:	4bb6      	ldr	r3, [pc, #728]	; (80057f8 <atan+0x320>)
 8005520:	429e      	cmp	r6, r3
 8005522:	dc14      	bgt.n	800554e <atan+0x76>
 8005524:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005528:	429e      	cmp	r6, r3
 800552a:	dc0d      	bgt.n	8005548 <atan+0x70>
 800552c:	a396      	add	r3, pc, #600	; (adr r3, 8005788 <atan+0x2b0>)
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	ee10 0a10 	vmov	r0, s0
 8005536:	4629      	mov	r1, r5
 8005538:	f7fa fe6c 	bl	8000214 <__adddf3>
 800553c:	4baf      	ldr	r3, [pc, #700]	; (80057fc <atan+0x324>)
 800553e:	2200      	movs	r2, #0
 8005540:	f7fb faae 	bl	8000aa0 <__aeabi_dcmpgt>
 8005544:	2800      	cmp	r0, #0
 8005546:	d1e6      	bne.n	8005516 <atan+0x3e>
 8005548:	f04f 3aff 	mov.w	sl, #4294967295
 800554c:	e02b      	b.n	80055a6 <atan+0xce>
 800554e:	f000 f963 	bl	8005818 <fabs>
 8005552:	4bab      	ldr	r3, [pc, #684]	; (8005800 <atan+0x328>)
 8005554:	429e      	cmp	r6, r3
 8005556:	ec55 4b10 	vmov	r4, r5, d0
 800555a:	f300 80bf 	bgt.w	80056dc <atan+0x204>
 800555e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005562:	429e      	cmp	r6, r3
 8005564:	f300 80a0 	bgt.w	80056a8 <atan+0x1d0>
 8005568:	ee10 2a10 	vmov	r2, s0
 800556c:	ee10 0a10 	vmov	r0, s0
 8005570:	462b      	mov	r3, r5
 8005572:	4629      	mov	r1, r5
 8005574:	f7fa fe4e 	bl	8000214 <__adddf3>
 8005578:	4ba0      	ldr	r3, [pc, #640]	; (80057fc <atan+0x324>)
 800557a:	2200      	movs	r2, #0
 800557c:	f7fa fe48 	bl	8000210 <__aeabi_dsub>
 8005580:	2200      	movs	r2, #0
 8005582:	4606      	mov	r6, r0
 8005584:	460f      	mov	r7, r1
 8005586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800558a:	4620      	mov	r0, r4
 800558c:	4629      	mov	r1, r5
 800558e:	f7fa fe41 	bl	8000214 <__adddf3>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4630      	mov	r0, r6
 8005598:	4639      	mov	r1, r7
 800559a:	f7fb f91b 	bl	80007d4 <__aeabi_ddiv>
 800559e:	f04f 0a00 	mov.w	sl, #0
 80055a2:	4604      	mov	r4, r0
 80055a4:	460d      	mov	r5, r1
 80055a6:	4622      	mov	r2, r4
 80055a8:	462b      	mov	r3, r5
 80055aa:	4620      	mov	r0, r4
 80055ac:	4629      	mov	r1, r5
 80055ae:	f7fa ffe7 	bl	8000580 <__aeabi_dmul>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4680      	mov	r8, r0
 80055b8:	4689      	mov	r9, r1
 80055ba:	f7fa ffe1 	bl	8000580 <__aeabi_dmul>
 80055be:	a374      	add	r3, pc, #464	; (adr r3, 8005790 <atan+0x2b8>)
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	4606      	mov	r6, r0
 80055c6:	460f      	mov	r7, r1
 80055c8:	f7fa ffda 	bl	8000580 <__aeabi_dmul>
 80055cc:	a372      	add	r3, pc, #456	; (adr r3, 8005798 <atan+0x2c0>)
 80055ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d2:	f7fa fe1f 	bl	8000214 <__adddf3>
 80055d6:	4632      	mov	r2, r6
 80055d8:	463b      	mov	r3, r7
 80055da:	f7fa ffd1 	bl	8000580 <__aeabi_dmul>
 80055de:	a370      	add	r3, pc, #448	; (adr r3, 80057a0 <atan+0x2c8>)
 80055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e4:	f7fa fe16 	bl	8000214 <__adddf3>
 80055e8:	4632      	mov	r2, r6
 80055ea:	463b      	mov	r3, r7
 80055ec:	f7fa ffc8 	bl	8000580 <__aeabi_dmul>
 80055f0:	a36d      	add	r3, pc, #436	; (adr r3, 80057a8 <atan+0x2d0>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fa fe0d 	bl	8000214 <__adddf3>
 80055fa:	4632      	mov	r2, r6
 80055fc:	463b      	mov	r3, r7
 80055fe:	f7fa ffbf 	bl	8000580 <__aeabi_dmul>
 8005602:	a36b      	add	r3, pc, #428	; (adr r3, 80057b0 <atan+0x2d8>)
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	f7fa fe04 	bl	8000214 <__adddf3>
 800560c:	4632      	mov	r2, r6
 800560e:	463b      	mov	r3, r7
 8005610:	f7fa ffb6 	bl	8000580 <__aeabi_dmul>
 8005614:	a368      	add	r3, pc, #416	; (adr r3, 80057b8 <atan+0x2e0>)
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f7fa fdfb 	bl	8000214 <__adddf3>
 800561e:	4642      	mov	r2, r8
 8005620:	464b      	mov	r3, r9
 8005622:	f7fa ffad 	bl	8000580 <__aeabi_dmul>
 8005626:	a366      	add	r3, pc, #408	; (adr r3, 80057c0 <atan+0x2e8>)
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	4680      	mov	r8, r0
 800562e:	4689      	mov	r9, r1
 8005630:	4630      	mov	r0, r6
 8005632:	4639      	mov	r1, r7
 8005634:	f7fa ffa4 	bl	8000580 <__aeabi_dmul>
 8005638:	a363      	add	r3, pc, #396	; (adr r3, 80057c8 <atan+0x2f0>)
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f7fa fde7 	bl	8000210 <__aeabi_dsub>
 8005642:	4632      	mov	r2, r6
 8005644:	463b      	mov	r3, r7
 8005646:	f7fa ff9b 	bl	8000580 <__aeabi_dmul>
 800564a:	a361      	add	r3, pc, #388	; (adr r3, 80057d0 <atan+0x2f8>)
 800564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005650:	f7fa fdde 	bl	8000210 <__aeabi_dsub>
 8005654:	4632      	mov	r2, r6
 8005656:	463b      	mov	r3, r7
 8005658:	f7fa ff92 	bl	8000580 <__aeabi_dmul>
 800565c:	a35e      	add	r3, pc, #376	; (adr r3, 80057d8 <atan+0x300>)
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	f7fa fdd5 	bl	8000210 <__aeabi_dsub>
 8005666:	4632      	mov	r2, r6
 8005668:	463b      	mov	r3, r7
 800566a:	f7fa ff89 	bl	8000580 <__aeabi_dmul>
 800566e:	a35c      	add	r3, pc, #368	; (adr r3, 80057e0 <atan+0x308>)
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f7fa fdcc 	bl	8000210 <__aeabi_dsub>
 8005678:	4632      	mov	r2, r6
 800567a:	463b      	mov	r3, r7
 800567c:	f7fa ff80 	bl	8000580 <__aeabi_dmul>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	4640      	mov	r0, r8
 8005686:	4649      	mov	r1, r9
 8005688:	f7fa fdc4 	bl	8000214 <__adddf3>
 800568c:	4622      	mov	r2, r4
 800568e:	462b      	mov	r3, r5
 8005690:	f7fa ff76 	bl	8000580 <__aeabi_dmul>
 8005694:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	d14b      	bne.n	8005736 <atan+0x25e>
 800569e:	4620      	mov	r0, r4
 80056a0:	4629      	mov	r1, r5
 80056a2:	f7fa fdb5 	bl	8000210 <__aeabi_dsub>
 80056a6:	e72c      	b.n	8005502 <atan+0x2a>
 80056a8:	ee10 0a10 	vmov	r0, s0
 80056ac:	4b53      	ldr	r3, [pc, #332]	; (80057fc <atan+0x324>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	4629      	mov	r1, r5
 80056b2:	f7fa fdad 	bl	8000210 <__aeabi_dsub>
 80056b6:	4b51      	ldr	r3, [pc, #324]	; (80057fc <atan+0x324>)
 80056b8:	4606      	mov	r6, r0
 80056ba:	460f      	mov	r7, r1
 80056bc:	2200      	movs	r2, #0
 80056be:	4620      	mov	r0, r4
 80056c0:	4629      	mov	r1, r5
 80056c2:	f7fa fda7 	bl	8000214 <__adddf3>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4630      	mov	r0, r6
 80056cc:	4639      	mov	r1, r7
 80056ce:	f7fb f881 	bl	80007d4 <__aeabi_ddiv>
 80056d2:	f04f 0a01 	mov.w	sl, #1
 80056d6:	4604      	mov	r4, r0
 80056d8:	460d      	mov	r5, r1
 80056da:	e764      	b.n	80055a6 <atan+0xce>
 80056dc:	4b49      	ldr	r3, [pc, #292]	; (8005804 <atan+0x32c>)
 80056de:	429e      	cmp	r6, r3
 80056e0:	da1d      	bge.n	800571e <atan+0x246>
 80056e2:	ee10 0a10 	vmov	r0, s0
 80056e6:	4b48      	ldr	r3, [pc, #288]	; (8005808 <atan+0x330>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	4629      	mov	r1, r5
 80056ec:	f7fa fd90 	bl	8000210 <__aeabi_dsub>
 80056f0:	4b45      	ldr	r3, [pc, #276]	; (8005808 <atan+0x330>)
 80056f2:	4606      	mov	r6, r0
 80056f4:	460f      	mov	r7, r1
 80056f6:	2200      	movs	r2, #0
 80056f8:	4620      	mov	r0, r4
 80056fa:	4629      	mov	r1, r5
 80056fc:	f7fa ff40 	bl	8000580 <__aeabi_dmul>
 8005700:	4b3e      	ldr	r3, [pc, #248]	; (80057fc <atan+0x324>)
 8005702:	2200      	movs	r2, #0
 8005704:	f7fa fd86 	bl	8000214 <__adddf3>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4630      	mov	r0, r6
 800570e:	4639      	mov	r1, r7
 8005710:	f7fb f860 	bl	80007d4 <__aeabi_ddiv>
 8005714:	f04f 0a02 	mov.w	sl, #2
 8005718:	4604      	mov	r4, r0
 800571a:	460d      	mov	r5, r1
 800571c:	e743      	b.n	80055a6 <atan+0xce>
 800571e:	462b      	mov	r3, r5
 8005720:	ee10 2a10 	vmov	r2, s0
 8005724:	4939      	ldr	r1, [pc, #228]	; (800580c <atan+0x334>)
 8005726:	2000      	movs	r0, #0
 8005728:	f7fb f854 	bl	80007d4 <__aeabi_ddiv>
 800572c:	f04f 0a03 	mov.w	sl, #3
 8005730:	4604      	mov	r4, r0
 8005732:	460d      	mov	r5, r1
 8005734:	e737      	b.n	80055a6 <atan+0xce>
 8005736:	4b36      	ldr	r3, [pc, #216]	; (8005810 <atan+0x338>)
 8005738:	4e36      	ldr	r6, [pc, #216]	; (8005814 <atan+0x33c>)
 800573a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800573e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005742:	e9da 2300 	ldrd	r2, r3, [sl]
 8005746:	f7fa fd63 	bl	8000210 <__aeabi_dsub>
 800574a:	4622      	mov	r2, r4
 800574c:	462b      	mov	r3, r5
 800574e:	f7fa fd5f 	bl	8000210 <__aeabi_dsub>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	e9d6 0100 	ldrd	r0, r1, [r6]
 800575a:	f7fa fd59 	bl	8000210 <__aeabi_dsub>
 800575e:	f1bb 0f00 	cmp.w	fp, #0
 8005762:	4604      	mov	r4, r0
 8005764:	460d      	mov	r5, r1
 8005766:	f6bf aed6 	bge.w	8005516 <atan+0x3e>
 800576a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800576e:	461d      	mov	r5, r3
 8005770:	e6d1      	b.n	8005516 <atan+0x3e>
 8005772:	a51d      	add	r5, pc, #116	; (adr r5, 80057e8 <atan+0x310>)
 8005774:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005778:	e6cd      	b.n	8005516 <atan+0x3e>
 800577a:	bf00      	nop
 800577c:	f3af 8000 	nop.w
 8005780:	54442d18 	.word	0x54442d18
 8005784:	bff921fb 	.word	0xbff921fb
 8005788:	8800759c 	.word	0x8800759c
 800578c:	7e37e43c 	.word	0x7e37e43c
 8005790:	e322da11 	.word	0xe322da11
 8005794:	3f90ad3a 	.word	0x3f90ad3a
 8005798:	24760deb 	.word	0x24760deb
 800579c:	3fa97b4b 	.word	0x3fa97b4b
 80057a0:	a0d03d51 	.word	0xa0d03d51
 80057a4:	3fb10d66 	.word	0x3fb10d66
 80057a8:	c54c206e 	.word	0xc54c206e
 80057ac:	3fb745cd 	.word	0x3fb745cd
 80057b0:	920083ff 	.word	0x920083ff
 80057b4:	3fc24924 	.word	0x3fc24924
 80057b8:	5555550d 	.word	0x5555550d
 80057bc:	3fd55555 	.word	0x3fd55555
 80057c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80057c4:	bfa2b444 	.word	0xbfa2b444
 80057c8:	52defd9a 	.word	0x52defd9a
 80057cc:	3fadde2d 	.word	0x3fadde2d
 80057d0:	af749a6d 	.word	0xaf749a6d
 80057d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80057d8:	fe231671 	.word	0xfe231671
 80057dc:	3fbc71c6 	.word	0x3fbc71c6
 80057e0:	9998ebc4 	.word	0x9998ebc4
 80057e4:	3fc99999 	.word	0x3fc99999
 80057e8:	54442d18 	.word	0x54442d18
 80057ec:	3ff921fb 	.word	0x3ff921fb
 80057f0:	440fffff 	.word	0x440fffff
 80057f4:	7ff00000 	.word	0x7ff00000
 80057f8:	3fdbffff 	.word	0x3fdbffff
 80057fc:	3ff00000 	.word	0x3ff00000
 8005800:	3ff2ffff 	.word	0x3ff2ffff
 8005804:	40038000 	.word	0x40038000
 8005808:	3ff80000 	.word	0x3ff80000
 800580c:	bff00000 	.word	0xbff00000
 8005810:	080058b8 	.word	0x080058b8
 8005814:	08005898 	.word	0x08005898

08005818 <fabs>:
 8005818:	ec51 0b10 	vmov	r0, r1, d0
 800581c:	ee10 2a10 	vmov	r2, s0
 8005820:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005824:	ec43 2b10 	vmov	d0, r2, r3
 8005828:	4770      	bx	lr
	...

0800582c <_init>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	bf00      	nop
 8005830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005832:	bc08      	pop	{r3}
 8005834:	469e      	mov	lr, r3
 8005836:	4770      	bx	lr

08005838 <_fini>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	bf00      	nop
 800583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583e:	bc08      	pop	{r3}
 8005840:	469e      	mov	lr, r3
 8005842:	4770      	bx	lr
